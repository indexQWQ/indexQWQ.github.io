let s_instance=null;class LAppWavFileHandler{static getInstance(){return s_instance=null==s_instance?new LAppWavFileHandler:s_instance}static releaseInstance(){null!=s_instance&&(s_instance=void 0),s_instance=null}update(e){let i,a;if(null==this._pcmData||this._sampleOffset>=this._wavFileInfo._samplesPerChannel)return this._lastRms=0,!1;this._userTimeSeconds+=e,(i=Math.floor(this._userTimeSeconds*this._wavFileInfo._samplingRate))>this._wavFileInfo._samplesPerChannel&&(i=this._wavFileInfo._samplesPerChannel);for(let t=a=0;t<this._wavFileInfo._numberOfChannels;t++)for(let e=this._sampleOffset;e<i;e++){var s=this._pcmData[t][e];a+=s*s}return a=Math.sqrt(a/(this._wavFileInfo._numberOfChannels*(i-this._sampleOffset))),this._lastRms=a,this._sampleOffset=i,!0}start(e){this._sampleOffset=0,this._userTimeSeconds=0,this._lastRms=0,this.loadWavFile(e)}getRms(){return this._lastRms}loadWavFile(s){return new Promise(i=>{let a=!1;null!=this._pcmData&&this.releasePcmData();(async()=>{if(this._byteReader._fileByte=await fetch(s).then(e=>e.arrayBuffer()),this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=this._byteReader._fileByte.byteLength,this._byteReader._readOffset=0,null==this._byteReader._fileByte||this._byteReader._fileSize<4)i(!1);else{this._wavFileInfo._fileName=s;try{if(!this._byteReader.getCheckSignature("RIFF"))throw a=!1,new Error('Cannot find Signeture "RIFF".');if(this._byteReader.get32LittleEndian(),!this._byteReader.getCheckSignature("WAVE"))throw a=!1,new Error('Cannot find Signeture "WAVE".');if(!this._byteReader.getCheckSignature("fmt "))throw a=!1,new Error('Cannot find Signeture "fmt".');var e=this._byteReader.get32LittleEndian();if(1!=this._byteReader.get16LittleEndian())throw a=!1,new Error("File is not linear PCM.");for(this._wavFileInfo._numberOfChannels=this._byteReader.get16LittleEndian(),this._wavFileInfo._samplingRate=this._byteReader.get32LittleEndian(),this._byteReader.get32LittleEndian(),this._byteReader.get16LittleEndian(),this._wavFileInfo._bitsPerSample=this._byteReader.get16LittleEndian(),16<e&&(this._byteReader._readOffset+=e-16);!this._byteReader.getCheckSignature("data")&&this._byteReader._readOffset<this._byteReader._fileSize;)this._byteReader._readOffset+=this._byteReader.get32LittleEndian()+4;if(this._byteReader._readOffset>=this._byteReader._fileSize)throw a=!1,new Error('Cannot find "data" Chunk.');var t=this._byteReader.get32LittleEndian();this._wavFileInfo._samplesPerChannel=8*t/(this._wavFileInfo._bitsPerSample*this._wavFileInfo._numberOfChannels),this._pcmData=new Array(this._wavFileInfo._numberOfChannels);for(let e=0;e<this._wavFileInfo._numberOfChannels;e++)this._pcmData[e]=new Float32Array(this._wavFileInfo._samplesPerChannel);for(let t=0;t<this._wavFileInfo._samplesPerChannel;t++)for(let e=0;e<this._wavFileInfo._numberOfChannels;e++)this._pcmData[e][t]=this.getPcmSample();a=!0,i(a)}catch(e){console.log(e)}}})().then(()=>{i(a)})})}getPcmSample(){let e;switch(this._wavFileInfo._bitsPerSample){case 8:e=this._byteReader.get8()-128,e<<=24;break;case 16:e=this._byteReader.get16LittleEndian()<<16;break;case 24:e=this._byteReader.get24LittleEndian()<<8;break;default:e=0}return e/2147483647}getPcmDataChannel(e){return this._pcmData&&e<this._pcmData.length?Float32Array.from(this._pcmData[e]):null}getWavSamplingRate(){return!this._wavFileInfo||this._wavFileInfo._samplingRate<1?null:this._wavFileInfo._samplingRate}releasePcmData(){for(let e=0;e<this._wavFileInfo._numberOfChannels;e++)this._pcmData[e]=null;delete this._pcmData,this._pcmData=null}constructor(){this.loadFiletoBytes=(e,t)=>{this._byteReader._fileByte=e,this._byteReader._fileDataView=new DataView(this._byteReader._fileByte),this._byteReader._fileSize=t},this._pcmData=null,this._userTimeSeconds=0,this._lastRms=0,this._sampleOffset=0,this._wavFileInfo=new WavFileInfo,this._byteReader=new ByteReader}}class WavFileInfo{constructor(){this._fileName="",this._numberOfChannels=0,this._bitsPerSample=0,this._samplingRate=0,this._samplesPerChannel=0}}class ByteReader{constructor(){this._fileByte=null,this._fileDataView=null,this._fileSize=0,this._readOffset=0}get8(){var e=this._fileDataView.getUint8(this._readOffset);return this._readOffset++,e}get16LittleEndian(){var e=this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=2,e}get24LittleEndian(){var e=this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=3,e}get32LittleEndian(){var e=this._fileDataView.getUint8(this._readOffset+3)<<24|this._fileDataView.getUint8(this._readOffset+2)<<16|this._fileDataView.getUint8(this._readOffset+1)<<8|this._fileDataView.getUint8(this._readOffset);return this._readOffset+=4,e}getCheckSignature(e){var t=new Uint8Array(4),i=(new TextEncoder).encode(e);if(4!=e.length)return!1;for(let e=0;e<4;e++)t[e]=this.get8();return t[0]==i[0]&&t[1]==i[1]&&t[2]==i[2]&&t[3]==i[3]}}export{s_instance,LAppWavFileHandler,WavFileInfo,ByteReader};