import{csmDelete}from"../live2dcubismframework";import{csmVector}from"../type/csmvector";import{CubismExpressionMotion}from"./cubismexpressionmotion";import{CubismMotionQueueManager}from"./cubismmotionqueuemanager";import{CubismLogInfo}from"../utils/cubismdebug";class ExpressionParameterValue{}class CubismExpressionMotionManager extends CubismMotionQueueManager{constructor(){super(),this._currentPriority=0,this._reservePriority=0,this._expressionParameterValues=new csmVector,this._fadeWeights=new csmVector}release(){this._expressionParameterValues&&(csmDelete(this._expressionParameterValues),this._expressionParameterValues=null),this._fadeWeights&&(csmDelete(this._fadeWeights),this._fadeWeights=null)}getCurrentPriority(){return CubismLogInfo("CubismExpressionMotionManager.getCurrentPriority() is deprecated because a priority value is not actually used during expression motion playback."),this._currentPriority}getReservePriority(){return CubismLogInfo("CubismExpressionMotionManager.getReservePriority() is deprecated because a priority value is not actually used during expression motion playback."),this._reservePriority}getFadeWeight(e){return e<0||this._fadeWeights.getSize()<1||e>=this._fadeWeights.getSize()?(console.warn("Failed to get the fade weight value. The element at that index does not exist."),-1):this._fadeWeights.at(e)}setFadeWeight(e,t){e<0||this._fadeWeights.getSize()<1||this._fadeWeights.getSize()<=e?console.warn("Failed to set the fade weight value. The element at that index does not exist."):this._fadeWeights.set(e,t)}setReservePriority(e){CubismLogInfo("CubismExpressionMotionManager.setReservePriority() is deprecated because a priority value is not actually used during expression motion playback."),this._reservePriority=e}startMotionPriority(e,t,i){return CubismLogInfo("CubismExpressionMotionManager.startMotionPriority() is deprecated because a priority value is not actually used during expression motion playback."),i==this.getReservePriority()&&this.setReservePriority(0),this._currentPriority=i,this.startMotion(e,t)}updateMotion(s,e){this._userTimeSeconds+=e;let t=!1;var i=this.getCubismMotionQueueEntries();let r=0,a=0;if(this._fadeWeights.getSize()!==i.getSize()){var o=i.getSize()-this._fadeWeights.getSize();for(let e=0;e<o;e++)this._fadeWeights.pushBack(0)}for(let e=this._motions.begin();e.notEqual(this._motions.end());){var n=e.ptr();if(null==n)e=i.erase(e);else{var u=n.getCubismMotion();if(null==u)csmDelete(n),e=i.erase(e);else{var m,l=u.getExpressionParameters();if(n.isAvailable())for(let i=0;i<l.getSize();++i)if(null!=l.at(i).parameterId){let t=-1;for(let e=0;e<this._expressionParameterValues.getSize();++e)if(this._expressionParameterValues.at(e).parameterId==l.at(i).parameterId){t=e;break}0<=t||((m=new ExpressionParameterValue).parameterId=l.at(i).parameterId,m.additiveValue=CubismExpressionMotion.DefaultAdditiveValue,m.multiplyValue=CubismExpressionMotion.DefaultMultiplyValue,m.overwriteValue=s.getParameterValueById(m.parameterId),this._expressionParameterValues.pushBack(m))}u.setupMotionQueueEntry(n,this._userTimeSeconds),this.setFadeWeight(a,u.updateFadeWeight(n,this._userTimeSeconds)),u.calculateExpressionParameters(s,this._userTimeSeconds,n,this._expressionParameterValues,a,this.getFadeWeight(a)),r+=0==u.getFadeInTime()?1:CubismMath.getEasingSine((this._userTimeSeconds-n.getFadeInStartTime())/u.getFadeInTime()),t=!0,n.isTriggeredFadeOut()&&n.startFadeOut(n.getFadeOutSeconds(),this._userTimeSeconds),e.preIncrement(),++a}}}if(1<i.getSize()&&1<=this.getFadeWeight(this._fadeWeights.getSize()-1))for(let e=i.getSize()-2;0<=e;--e){var d=i.at(e);csmDelete(d),i.remove(e),this._fadeWeights.remove(e)}1<r&&(r=1);for(let e=0;e<this._expressionParameterValues.getSize();++e){var g=this._expressionParameterValues.at(e);s.setParameterValueById(g.parameterId,(g.overwriteValue+g.additiveValue)*g.multiplyValue,r),g.additiveValue=CubismExpressionMotion.DefaultAdditiveValue,g.multiplyValue=CubismExpressionMotion.DefaultMultiplyValue}return t}}import*as $ from"./cubismexpressionmotionmanager";import{CubismMath}from"../math/cubismmath";var Live2DCubismFramework;(Live2DCubismFramework=Live2DCubismFramework||{}).CubismExpressionMotionManager=$.CubismExpressionMotionManager;export{ExpressionParameterValue,CubismExpressionMotionManager,Live2DCubismFramework};