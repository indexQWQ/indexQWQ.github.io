import{CubismFramework}from"../live2dcubismframework";import{csmVector}from"../type/csmvector";import{CubismJson}from"../utils/cubismjson";import{ACubismMotion}from"./acubismmotion";let ExpressionKeyFadeIn="FadeInTime",ExpressionKeyFadeOut="FadeOutTime",ExpressionKeyParameters="Parameters",ExpressionKeyId="Id",ExpressionKeyValue="Value",ExpressionKeyBlend="Blend",BlendValueAdd="Add",BlendValueMultiply="Multiply",BlendValueOverwrite="Overwrite",DefaultFadeTime=1;class CubismExpressionMotion extends ACubismMotion{static create(e,i){var t=new CubismExpressionMotion;return t.parse(e,i),t}doUpdateParameters(i,e,t,r){for(let e=0;e<this._parameters.getSize();++e){var a=this._parameters.at(e);switch(a.blendType){case ExpressionBlendType.Additive:i.addParameterValueById(a.parameterId,a.value,t);break;case ExpressionBlendType.Multiply:i.multiplyParameterValueById(a.parameterId,a.value,t);break;case ExpressionBlendType.Overwrite:i.setParameterValueById(a.parameterId,a.value,t)}}}calculateExpressionParameters(i,e,t,r,a,s){if(null!=t&&null!=r&&t.isAvailable()){this._fadeWeight=this.updateFadeWeight(t,e);for(let e=0;e<r.getSize();++e){var l=r.at(e);if(null!=l.parameterId){var u=l.overwriteValue=i.getParameterValueById(l.parameterId),n=this.getExpressionParameters();let r=-1;for(let e=0;e<n.getSize();++e)if(l.parameterId==n.at(e).parameterId){r=e;break}if(r<0)0==a?(l.additiveValue=CubismExpressionMotion.DefaultAdditiveValue,l.multiplyValue=CubismExpressionMotion.DefaultMultiplyValue,l.overwriteValue=u):(l.additiveValue=this.calculateValue(l.additiveValue,CubismExpressionMotion.DefaultAdditiveValue,s),l.multiplyValue=this.calculateValue(l.multiplyValue,CubismExpressionMotion.DefaultMultiplyValue,s),l.overwriteValue=this.calculateValue(l.overwriteValue,u,s));else{var o=n.at(r).value;let e,i,t;switch(n.at(r).blendType){case ExpressionBlendType.Additive:e=o,i=CubismExpressionMotion.DefaultMultiplyValue,t=u;break;case ExpressionBlendType.Multiply:e=CubismExpressionMotion.DefaultAdditiveValue,i=o,t=u;break;case ExpressionBlendType.Overwrite:e=CubismExpressionMotion.DefaultAdditiveValue,i=CubismExpressionMotion.DefaultMultiplyValue,t=o;break;default:return}0==a?(l.additiveValue=e,l.multiplyValue=i,l.overwriteValue=t):(l.additiveValue=l.additiveValue*(1-s)+e*s,l.multiplyValue=l.multiplyValue*(1-s)+i*s,l.overwriteValue=l.overwriteValue*(1-s)+t*s)}}}}}getExpressionParameters(){return this._parameters}getFadeWeight(){return this._fadeWeight}parse(e,i){e=CubismJson.create(e,i);if(e){var t=e.getRoot(),r=(this.setFadeInTime(t.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime)),this.setFadeOutTime(t.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime)),t.getValueByString(ExpressionKeyParameters).getSize());this._parameters.prepareCapacity(r);for(let i=0;i<r;++i){var a=t.getValueByString(ExpressionKeyParameters).getValueByIndex(i),s=CubismFramework.getIdManager().getId(a.getValueByString(ExpressionKeyId).getRawString()),l=a.getValueByString(ExpressionKeyValue).toFloat();let e;e=a.getValueByString(ExpressionKeyBlend).isNull()||a.getValueByString(ExpressionKeyBlend).getString()==BlendValueAdd?ExpressionBlendType.Additive:a.getValueByString(ExpressionKeyBlend).getString()==BlendValueMultiply?ExpressionBlendType.Multiply:a.getValueByString(ExpressionKeyBlend).getString()==BlendValueOverwrite?ExpressionBlendType.Overwrite:ExpressionBlendType.Additive;a=new ExpressionParameter;a.parameterId=s,a.blendType=e,a.value=l,this._parameters.pushBack(a)}CubismJson.delete(e)}}calculateValue(e,i,t){return e*(1-t)+i*t}constructor(){super(),this._parameters=new csmVector,this._fadeWeight=0}}var ExpressionBlendType,Live2DCubismFramework;CubismExpressionMotion.DefaultAdditiveValue=0,CubismExpressionMotion.DefaultMultiplyValue=1,(e=>{e[e.Additive=0]="Additive",e[e.Multiply=1]="Multiply",e[e.Overwrite=2]="Overwrite"})(ExpressionBlendType=ExpressionBlendType||{});class ExpressionParameter{}import*as $ from"./cubismexpressionmotion";(e=>{e.CubismExpressionMotion=$.CubismExpressionMotion,e.ExpressionBlendType=$.ExpressionBlendType,e.ExpressionParameter=$.ExpressionParameter})(Live2DCubismFramework=Live2DCubismFramework||{});export{CubismExpressionMotion,ExpressionBlendType,ExpressionParameter,Live2DCubismFramework};