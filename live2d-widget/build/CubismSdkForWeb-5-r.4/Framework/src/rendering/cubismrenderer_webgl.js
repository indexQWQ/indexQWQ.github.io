import{csmMap}from"../type/csmmap";import{csmVector}from"../type/csmvector";import{CubismLogError}from"../utils/cubismdebug";import{CubismClippingManager}from"./cubismclippingmanager";import{CubismClippingContext,CubismRenderer}from"./cubismrenderer";import{CubismShaderManager_WebGL}from"./cubismshader_webgl";let s_viewport,s_fbo;class CubismClippingManager_WebGL extends CubismClippingManager{getMaskRenderTexture(){if(this._maskTexture&&null!=this._maskTexture.textures)this._maskTexture.frameNo=this._currentFrameNo;else{null!=this._maskRenderTextures&&this._maskRenderTextures.clear(),this._maskRenderTextures=new csmVector,null!=this._maskColorBuffers&&this._maskColorBuffers.clear(),this._maskColorBuffers=new csmVector;var t=this._clippingMaskBufferSize;for(let e=0;e<this._renderTextureCount;e++)this._maskColorBuffers.pushBack(this.gl.createTexture()),this.gl.bindTexture(this.gl.TEXTURE_2D,this._maskColorBuffers.at(e)),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,t,t,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this._maskRenderTextures.pushBack(this.gl.createFramebuffer()),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTextures.at(e)),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._maskColorBuffers.at(e),0);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,s_fbo),this._maskTexture=new CubismRenderTextureResource(this._currentFrameNo,this._maskRenderTextures)}return this._maskTexture.textures}setGL(e){this.gl=e}constructor(){super(CubismClippingContext_WebGL)}setupClippingContext(t,i){this._currentFrameNo++;let s=0;for(let e=0;e<this._clippingContextListForMask.getSize();e++){var r=this._clippingContextListForMask.at(e);this.calcClippedDrawTotalBounds(t,r),r._isUsing&&s++}if(0<s){this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._currentMaskRenderTexture=this.getMaskRenderTexture().at(0),i.preDraw(),this.setupLayoutBounds(s),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture),this._clearedFrameBufferFlags.getSize()!=this._renderTextureCount&&(this._clearedFrameBufferFlags.clear(),this._clearedFrameBufferFlags=new csmVector(this._renderTextureCount));for(let e=0;e<this._clearedFrameBufferFlags.getSize();e++)this._clearedFrameBufferFlags.set(e,!1);for(let e=0;e<this._clippingContextListForMask.getSize();e++){var l=this._clippingContextListForMask.at(e),a=l._allClippedDrawRect,n=l._layoutBounds,g=this.getMaskRenderTexture().at(l._bufferIndex),h=(this._currentMaskRenderTexture!=g&&(this._currentMaskRenderTexture=g,i.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._currentMaskRenderTexture)),this._tmpBoundsOnModel.setRect(a),this._tmpBoundsOnModel.expand(.05*a.width,.05*a.height),g=n.width/this._tmpBoundsOnModel.width,a=n.height/this._tmpBoundsOnModel.height,this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(n.x,n.y),this._tmpMatrix.scaleRelative(g,a),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(n.x,n.y),this._tmpMatrix.scaleRelative(g,a),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),l._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),l._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray()),l._clippingIdCount);for(let e=0;e<h;e++){var _=l._clippingIdList[e];t.getDrawableDynamicFlagVertexPositionsDidChange(_)&&(i.setIsCulling(0!=t.getDrawableCulling(_)),this._clearedFrameBufferFlags.at(l._bufferIndex)||(this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this._clearedFrameBufferFlags.set(l._bufferIndex,!0)),i.setClippingContextBufferForMask(l),i.drawMeshWebGL(t,_))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,s_fbo),i.setClippingContextBufferForMask(null),this.gl.viewport(s_viewport[0],s_viewport[1],s_viewport[2],s_viewport[3])}}getColorBuffer(){return this._maskColorBuffers}getClippingMaskCount(){return this._clippingContextListForMask.getSize()}}class CubismRenderTextureResource{constructor(e,t){this.frameNo=e,this.textures=t}}class CubismClippingContext_WebGL extends CubismClippingContext{constructor(e,t,i){super(t,i),this._owner=e}getClippingManager(){return this._owner}setGl(e){this._owner.setGL(e)}}class CubismRendererProfile_WebGL{setGlEnable(e,t){t?this.gl.enable(e):this.gl.disable(e)}setGlEnableVertexAttribArray(e,t){t?this.gl.enableVertexAttribArray(e):this.gl.disableVertexAttribArray(e)}save(){null==this.gl?CubismLogError("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function."):(this._lastArrayBufferBinding=this.gl.getParameter(this.gl.ARRAY_BUFFER_BINDING),this._lastElementArrayBufferBinding=this.gl.getParameter(this.gl.ELEMENT_ARRAY_BUFFER_BINDING),this._lastProgram=this.gl.getParameter(this.gl.CURRENT_PROGRAM),this._lastActiveTexture=this.gl.getParameter(this.gl.ACTIVE_TEXTURE),this.gl.activeTexture(this.gl.TEXTURE1),this._lastTexture1Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this.gl.activeTexture(this.gl.TEXTURE0),this._lastTexture0Binding2D=this.gl.getParameter(this.gl.TEXTURE_BINDING_2D),this._lastVertexAttribArrayEnabled[0]=this.gl.getVertexAttrib(0,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[1]=this.gl.getVertexAttrib(1,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[2]=this.gl.getVertexAttrib(2,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastVertexAttribArrayEnabled[3]=this.gl.getVertexAttrib(3,this.gl.VERTEX_ATTRIB_ARRAY_ENABLED),this._lastScissorTest=this.gl.isEnabled(this.gl.SCISSOR_TEST),this._lastStencilTest=this.gl.isEnabled(this.gl.STENCIL_TEST),this._lastDepthTest=this.gl.isEnabled(this.gl.DEPTH_TEST),this._lastCullFace=this.gl.isEnabled(this.gl.CULL_FACE),this._lastBlend=this.gl.isEnabled(this.gl.BLEND),this._lastFrontFace=this.gl.getParameter(this.gl.FRONT_FACE),this._lastColorMask=this.gl.getParameter(this.gl.COLOR_WRITEMASK),this._lastBlending[0]=this.gl.getParameter(this.gl.BLEND_SRC_RGB),this._lastBlending[1]=this.gl.getParameter(this.gl.BLEND_DST_RGB),this._lastBlending[2]=this.gl.getParameter(this.gl.BLEND_SRC_ALPHA),this._lastBlending[3]=this.gl.getParameter(this.gl.BLEND_DST_ALPHA),this._lastFBO=this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING),this._lastViewport=this.gl.getParameter(this.gl.VIEWPORT))}restore(){null==this.gl?CubismLogError("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function."):(this.gl.useProgram(this._lastProgram),this.setGlEnableVertexAttribArray(0,this._lastVertexAttribArrayEnabled[0]),this.setGlEnableVertexAttribArray(1,this._lastVertexAttribArrayEnabled[1]),this.setGlEnableVertexAttribArray(2,this._lastVertexAttribArrayEnabled[2]),this.setGlEnableVertexAttribArray(3,this._lastVertexAttribArrayEnabled[3]),this.setGlEnable(this.gl.SCISSOR_TEST,this._lastScissorTest),this.setGlEnable(this.gl.STENCIL_TEST,this._lastStencilTest),this.setGlEnable(this.gl.DEPTH_TEST,this._lastDepthTest),this.setGlEnable(this.gl.CULL_FACE,this._lastCullFace),this.setGlEnable(this.gl.BLEND,this._lastBlend),this.gl.frontFace(this._lastFrontFace),this.gl.colorMask(this._lastColorMask[0],this._lastColorMask[1],this._lastColorMask[2],this._lastColorMask[3]),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this._lastArrayBufferBinding),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this._lastElementArrayBufferBinding),this.gl.activeTexture(this.gl.TEXTURE1),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture1Binding2D),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this._lastTexture0Binding2D),this.gl.activeTexture(this._lastActiveTexture),this.gl.blendFuncSeparate(this._lastBlending[0],this._lastBlending[1],this._lastBlending[2],this._lastBlending[3]))}setGl(e){this.gl=e}constructor(){this._lastVertexAttribArrayEnabled=new Array(4),this._lastColorMask=new Array(4),this._lastBlending=new Array(4),this._lastViewport=new Array(4)}}class CubismRenderer_WebGL extends CubismRenderer{initialize(e,t=1){e.isUsingMasking()&&(this._clippingManager=new CubismClippingManager_WebGL,this._clippingManager.initialize(e,t)),this._sortedDrawableIndexList.resize(e.getDrawableCount(),0),super.initialize(e)}bindTexture(e,t){this._textures.setValue(e,t)}getBindedTextures(){return this._textures}setClippingMaskBufferSize(e){var t;this._model.isUsingMasking()&&(t=this._clippingManager.getRenderTextureCount(),this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new CubismClippingManager_WebGL,this._clippingManager.setClippingMaskBufferSize(e),this._clippingManager.initialize(this.getModel(),t))}getClippingMaskBufferSize(){return this._model.isUsingMasking()?this._clippingManager.getClippingMaskBufferSize():-1}getRenderTextureCount(){return this._model.isUsingMasking()?this._clippingManager.getRenderTextureCount():-1}constructor(){super(),this._clippingContextBufferForMask=null,this._clippingContextBufferForDraw=null,this._rendererProfile=new CubismRendererProfile_WebGL,this.firstDraw=!0,this._textures=new csmMap,this._sortedDrawableIndexList=new csmVector,this._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},this._textures.prepareCapacity(32,!0)}release(){this._clippingManager&&(this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null),null!=this.gl&&(this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null)}doDrawModel(){if(null==this.gl)CubismLogError("'gl' is null. WebGLRenderingContext is required.\nPlease call 'CubimRenderer_WebGL.startUp' function.");else{null!=this._clippingManager&&(this.preDraw(),this.isUsingHighPrecisionMask()?this._clippingManager.setupMatrixForHighPrecision(this.getModel(),!1):this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();var t=this.getModel().getDrawableCount(),i=this.getModel().getDrawableRenderOrders();for(let e=0;e<t;++e){var s=i[e];this._sortedDrawableIndexList.set(s,e)}for(let e=0;e<t;++e){var r=this._sortedDrawableIndexList.at(e);if(this.getModel().getDrawableDynamicFlagIsVisible(r)){var l=null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(r):null;if(null!=l&&this.isUsingHighPrecisionMask()){l._isUsing&&(this.gl.viewport(0,0,this._clippingManager.getClippingMaskBufferSize(),this._clippingManager.getClippingMaskBufferSize()),this.preDraw(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,l.getClippingManager().getMaskRenderTexture().at(l._bufferIndex)),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT));var a=l._clippingIdCount;for(let e=0;e<a;e++){var n=l._clippingIdList[e];this._model.getDrawableDynamicFlagVertexPositionsDidChange(n)&&(this.setIsCulling(0!=this._model.getDrawableCulling(n)),this.setClippingContextBufferForMask(l),this.drawMeshWebGL(this._model,n))}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,s_fbo),this.setClippingContextBufferForMask(null),this.gl.viewport(s_viewport[0],s_viewport[1],s_viewport[2],s_viewport[3]),this.preDraw()}this.setClippingContextBufferForDraw(l),this.setIsCulling(this.getModel().getDrawableCulling(r)),this.drawMeshWebGL(this._model,r)}}}}drawMeshWebGL(e,t){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW),this.isGeneratingMask()?CubismShaderManager_WebGL.getInstance().getShader(this.gl).setupShaderProgramForMask(this,e,t):CubismShaderManager_WebGL.getInstance().getShader(this.gl).setupShaderProgramForDraw(this,e,t);e=e.getDrawableVertexIndexCount(t);this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)}saveProfile(){this._rendererProfile.save()}restoreProfile(){this._rendererProfile.restore()}static doStaticRelease(){CubismShaderManager_WebGL.deleteInstance()}setRenderState(e,t){s_fbo=e,s_viewport=t}preDraw(){if(this.firstDraw&&(this.firstDraw=!1),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null),0<this.getAnisotropy()&&this._extension)for(let e=0;e<this._textures.getSize();++e)this.gl.bindTexture(this.gl.TEXTURE_2D,this._textures.getValue(e)),this.gl.texParameterf(this.gl.TEXTURE_2D,this._extension.TEXTURE_MAX_ANISOTROPY_EXT,this.getAnisotropy())}setClippingContextBufferForMask(e){this._clippingContextBufferForMask=e}getClippingContextBufferForMask(){return this._clippingContextBufferForMask}setClippingContextBufferForDraw(e){this._clippingContextBufferForDraw=e}getClippingContextBufferForDraw(){return this._clippingContextBufferForDraw}isGeneratingMask(){return null!=this.getClippingContextBufferForMask()}startUp(e){this.gl=e,this._clippingManager&&this._clippingManager.setGL(e),CubismShaderManager_WebGL.getInstance().setGlContext(e),this._rendererProfile.setGl(e),this._extension=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")}}CubismRenderer.staticRelease=()=>{CubismRenderer_WebGL.doStaticRelease()};import*as $ from"./cubismrenderer_webgl";var Live2DCubismFramework;(e=>{e.CubismClippingContext=$.CubismClippingContext_WebGL,e.CubismClippingManager_WebGL=$.CubismClippingManager_WebGL,e.CubismRenderTextureResource=$.CubismRenderTextureResource,e.CubismRenderer_WebGL=$.CubismRenderer_WebGL})(Live2DCubismFramework=Live2DCubismFramework||{});export{CubismClippingManager_WebGL,CubismRenderTextureResource,CubismClippingContext_WebGL,CubismRendererProfile_WebGL,CubismRenderer_WebGL,Live2DCubismFramework};