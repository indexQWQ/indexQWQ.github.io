import{JsonArray,JsonBoolean,JsonFloat,JsonMap,JsonNullvalue,JsonString}from"./cubismjson";class CubismJsonExtension{static parseJsonObject(o,s){return Object.keys(o).forEach(n=>{var e;"boolean"==typeof o[n]?(e=Boolean(o[n]),s.put(n,new JsonBoolean(e))):"string"==typeof o[n]?(e=String(o[n]),s.put(n,new JsonString(e))):"number"==typeof o[n]?(e=Number(o[n]),s.put(n,new JsonFloat(e))):o[n]instanceof Array?s.put(n,CubismJsonExtension.parseJsonArray(o[n])):o[n]instanceof Object?s.put(n,CubismJsonExtension.parseJsonObject(o[n],new JsonMap)):null==o[n]?s.put(n,new JsonNullvalue):s.put(n,o[n])}),s}static parseJsonArray(s){let a=new JsonArray;return Object.keys(s).forEach(n=>{var e=Number(n);if("number"==typeof e)"boolean"==typeof s[n]?(e=Boolean(s[n]),a.add(new JsonBoolean(e))):"string"==typeof s[n]?(e=String(s[n]),a.add(new JsonString(e))):"number"==typeof s[n]?(e=Number(s[n]),a.add(new JsonFloat(e))):s[n]instanceof Array?a.add(this.parseJsonArray(s[n])):s[n]instanceof Object?a.add(this.parseJsonObject(s[n],new JsonMap)):null==s[n]?a.add(new JsonNullvalue):a.add(s[n]);else if(s[n]instanceof Array)a.add(this.parseJsonArray(s[n]));else if(s[n]instanceof Object)a.add(this.parseJsonObject(s[n],new JsonMap));else if(null==s[n])a.add(new JsonNullvalue);else{var o=Array(s[n]);for(let n=0;n<o.length;n++)a.add(o[n])}}),a}}export{CubismJsonExtension};