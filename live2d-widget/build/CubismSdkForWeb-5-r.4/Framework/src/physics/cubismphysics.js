import{CubismMath}from"../math/cubismmath";import{CubismVector2}from"../math/cubismvector2";import{csmVector}from"../type/csmvector";import{CubismPhysicsInput,CubismPhysicsOutput,CubismPhysicsParticle,CubismPhysicsRig,CubismPhysicsSource,CubismPhysicsSubRig,CubismPhysicsTargetType}from"./cubismphysicsinternal";import{CubismPhysicsJson}from"./cubismphysicsjson";let PhysicsTypeTagX="X",PhysicsTypeTagY="Y",PhysicsTypeTagAngle="Angle",AirResistance=5,MaximumWeight=100,MovementThreshold=.001,MaxDeltaTime=5;class CubismPhysics{static create(t,i){var e=new CubismPhysics;return e.parse(t,i),e._physicsRig.gravity.y=0,e}static delete(t){null!=t&&t.release()}parse(t,i){this._physicsRig=new CubismPhysicsRig;let e=new CubismPhysicsJson(t,i),s=(this._physicsRig.gravity=e.getGravity(),this._physicsRig.wind=e.getWind(),this._physicsRig.subRigCount=e.getSubRigCount(),this._physicsRig.fps=e.getFps(),this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,CubismPhysicsSubRig,!0),this._physicsRig.inputs.updateSize(e.getTotalInputCount(),CubismPhysicsInput,!0),this._physicsRig.outputs.updateSize(e.getTotalOutputCount(),CubismPhysicsOutput,!0),this._physicsRig.particles.updateSize(e.getVertexCount(),CubismPhysicsParticle,!0),this._currentRigOutputs.clear(),this._previousRigOutputs.clear(),0),a=0,r=0;for(let i=0;i<this._physicsRig.settings.getSize();++i){this._physicsRig.settings.at(i).normalizationPosition.minimum=e.getNormalizationPositionMinimumValue(i),this._physicsRig.settings.at(i).normalizationPosition.maximum=e.getNormalizationPositionMaximumValue(i),this._physicsRig.settings.at(i).normalizationPosition.defalut=e.getNormalizationPositionDefaultValue(i),this._physicsRig.settings.at(i).normalizationAngle.minimum=e.getNormalizationAngleMinimumValue(i),this._physicsRig.settings.at(i).normalizationAngle.maximum=e.getNormalizationAngleMaximumValue(i),this._physicsRig.settings.at(i).normalizationAngle.defalut=e.getNormalizationAngleDefaultValue(i),this._physicsRig.settings.at(i).inputCount=e.getInputCount(i),this._physicsRig.settings.at(i).baseInputIndex=s;for(let t=0;t<this._physicsRig.settings.at(i).inputCount;++t)this._physicsRig.inputs.at(s+t).sourceParameterIndex=-1,this._physicsRig.inputs.at(s+t).weight=e.getInputWeight(i,t),this._physicsRig.inputs.at(s+t).reflect=e.getInputReflect(i,t),e.getInputType(i,t)==PhysicsTypeTagX?(this._physicsRig.inputs.at(s+t).type=CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.inputs.at(s+t).getNormalizedParameterValue=getInputTranslationXFromNormalizedParameterValue):e.getInputType(i,t)==PhysicsTypeTagY?(this._physicsRig.inputs.at(s+t).type=CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.inputs.at(s+t).getNormalizedParameterValue=getInputTranslationYFromNormalizedParamterValue):e.getInputType(i,t)==PhysicsTypeTagAngle&&(this._physicsRig.inputs.at(s+t).type=CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(s+t).getNormalizedParameterValue=getInputAngleFromNormalizedParameterValue),this._physicsRig.inputs.at(s+t).source.targetType=CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(s+t).source.id=e.getInputSourceId(i,t);s+=this._physicsRig.settings.at(i).inputCount,this._physicsRig.settings.at(i).outputCount=e.getOutputCount(i),this._physicsRig.settings.at(i).baseOutputIndex=a;var u=new PhysicsOutput,n=(u.outputs.resize(this._physicsRig.settings.at(i).outputCount),new PhysicsOutput);n.outputs.resize(this._physicsRig.settings.at(i).outputCount);for(let t=0;t<this._physicsRig.settings.at(i).outputCount;++t)u.outputs.set(t,0),n.outputs.set(t,0),this._physicsRig.outputs.at(a+t).destinationParameterIndex=-1,this._physicsRig.outputs.at(a+t).vertexIndex=e.getOutputVertexIndex(i,t),this._physicsRig.outputs.at(a+t).angleScale=e.getOutputAngleScale(i,t),this._physicsRig.outputs.at(a+t).weight=e.getOutputWeight(i,t),this._physicsRig.outputs.at(a+t).destination.targetType=CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(a+t).destination.id=e.getOutputDestinationId(i,t),e.getOutputType(i,t)==PhysicsTypeTagX?(this._physicsRig.outputs.at(a+t).type=CubismPhysicsSource.CubismPhysicsSource_X,this._physicsRig.outputs.at(a+t).getValue=getOutputTranslationX,this._physicsRig.outputs.at(a+t).getScale=getOutputScaleTranslationX):e.getOutputType(i,t)==PhysicsTypeTagY?(this._physicsRig.outputs.at(a+t).type=CubismPhysicsSource.CubismPhysicsSource_Y,this._physicsRig.outputs.at(a+t).getValue=getOutputTranslationY,this._physicsRig.outputs.at(a+t).getScale=getOutputScaleTranslationY):e.getOutputType(i,t)==PhysicsTypeTagAngle&&(this._physicsRig.outputs.at(a+t).type=CubismPhysicsSource.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(a+t).getValue=getOutputAngle,this._physicsRig.outputs.at(a+t).getScale=getOutputScaleAngle),this._physicsRig.outputs.at(a+t).reflect=e.getOutputReflect(i,t);this._currentRigOutputs.pushBack(u),this._previousRigOutputs.pushBack(n),a+=this._physicsRig.settings.at(i).outputCount,this._physicsRig.settings.at(i).particleCount=e.getParticleCount(i),this._physicsRig.settings.at(i).baseParticleIndex=r;for(let t=0;t<this._physicsRig.settings.at(i).particleCount;++t)this._physicsRig.particles.at(r+t).mobility=e.getParticleMobility(i,t),this._physicsRig.particles.at(r+t).delay=e.getParticleDelay(i,t),this._physicsRig.particles.at(r+t).acceleration=e.getParticleAcceleration(i,t),this._physicsRig.particles.at(r+t).radius=e.getParticleRadius(i,t),this._physicsRig.particles.at(r+t).position=e.getParticlePosition(i,t);r+=this._physicsRig.settings.at(i).particleCount}this.initialize(),e.release(),e=void 0,e=null}stabilization(e){var t,s,a,r,u,n,o,p,c=new CubismVector2,l=e.getModel().parameters.values,m=e.getModel().parameters.maximumValues,h=e.getModel().parameters.minimumValues,g=e.getModel().parameters.defaultValues;(null!=(t=null==(t=this._parameterCaches)?void 0:t.length)?t:0)<e.getParameterCount()&&(this._parameterCaches=new Float32Array(e.getParameterCount())),(null!=(t=null==(t=this._parameterInputCaches)?void 0:t.length)?t:0)<e.getParameterCount()&&(this._parameterInputCaches=new Float32Array(e.getParameterCount()));for(let t=0;t<e.getParameterCount();++t)this._parameterCaches[t]=l[t],this._parameterInputCaches[t]=l[t];for(let i=0;i<this._physicsRig.subRigCount;++i){s={angle:0},c.x=0,c.y=0,u=this._physicsRig.settings.at(i),n=this._physicsRig.inputs.get(u.baseInputIndex),o=this._physicsRig.outputs.get(u.baseOutputIndex),p=this._physicsRig.particles.get(u.baseParticleIndex);for(let t=0;t<u.inputCount;++t)a=n[t].weight/MaximumWeight,-1==n[t].sourceParameterIndex&&(n[t].sourceParameterIndex=e.getParameterIndex(n[t].source.id)),n[t].getNormalizedParameterValue(c,s,l[n[t].sourceParameterIndex],h[n[t].sourceParameterIndex],m[n[t].sourceParameterIndex],g[n[t].sourceParameterIndex],u.normalizationPosition,u.normalizationAngle,n[t].reflect,a),this._parameterCaches[n[t].sourceParameterIndex]=l[n[t].sourceParameterIndex];r=CubismMath.degreesToRadian(-s.angle),c.x=c.x*CubismMath.cos(r)-c.y*CubismMath.sin(r),c.y=c.x*CubismMath.sin(r)+c.y*CubismMath.cos(r),updateParticlesForStabilization(p,u.particleCount,c,s.angle,this._options.wind,MovementThreshold*u.normalizationPosition.maximum);for(let t=0;t<u.outputCount;++t){var y=o[t].vertexIndex;if(-1==o[t].destinationParameterIndex&&(o[t].destinationParameterIndex=e.getParameterIndex(o[t].destination.id)),!(y<1||y>=u.particleCount)){new CubismVector2;var C=p[y].position.substract(p[y-1].position),C=o[t].getValue(C,p,y,o[t].reflect,this._options.gravity),y=(this._currentRigOutputs.at(i).outputs.set(t,C),this._previousRigOutputs.at(i).outputs.set(t,C),o[t].destinationParameterIndex),d=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(l.subarray(y))):l.slice(y);updateOutputParameterValue(d,h[y],m[y],C,o[t]);for(let t=y,i=0;t<this._parameterCaches.length;t++,i++)l[t]=this._parameterCaches[t]=d[i]}}}}evaluate(e,i){var s,a,r,u,n,o=new CubismVector2;let p,c;if(!(i<=0)){var l=e.getModel().parameters.values,m=e.getModel().parameters.maximumValues,h=e.getModel().parameters.minimumValues,g=e.getModel().parameters.defaultValues;let t;if(this._currentRemainTime+=i,this._currentRemainTime>MaxDeltaTime&&(this._currentRemainTime=0),(null!=(b=null==(b=this._parameterCaches)?void 0:b.length)?b:0)<e.getParameterCount()&&(this._parameterCaches=new Float32Array(e.getParameterCount())),(null!=(b=null==(b=this._parameterInputCaches)?void 0:b.length)?b:0)<e.getParameterCount()){this._parameterInputCaches=new Float32Array(e.getParameterCount());for(let t=0;t<e.getParameterCount();++t)this._parameterInputCaches[t]=l[t]}for(t=0<this._physicsRig.fps?1/this._physicsRig.fps:i;this._currentRemainTime>=t;){for(let i=0;i<this._physicsRig.subRigCount;++i){p=this._physicsRig.settings.at(i),c=this._physicsRig.outputs.get(p.baseOutputIndex);for(let t=0;t<p.outputCount;++t)this._previousRigOutputs.at(i).outputs.set(t,this._currentRigOutputs.at(i).outputs.at(t))}var y=t/this._currentRemainTime;for(let t=0;t<e.getParameterCount();++t)this._parameterCaches[t]=this._parameterInputCaches[t]*(1-y)+l[t]*y,this._parameterInputCaches[t]=this._parameterCaches[t];for(let i=0;i<this._physicsRig.subRigCount;++i){s={angle:0},o.x=0,o.y=0,p=this._physicsRig.settings.at(i),u=this._physicsRig.inputs.get(p.baseInputIndex),c=this._physicsRig.outputs.get(p.baseOutputIndex),n=this._physicsRig.particles.get(p.baseParticleIndex);for(let t=0;t<p.inputCount;++t)a=u[t].weight/MaximumWeight,-1==u[t].sourceParameterIndex&&(u[t].sourceParameterIndex=e.getParameterIndex(u[t].source.id)),u[t].getNormalizedParameterValue(o,s,this._parameterCaches[u[t].sourceParameterIndex],h[u[t].sourceParameterIndex],m[u[t].sourceParameterIndex],g[u[t].sourceParameterIndex],p.normalizationPosition,p.normalizationAngle,u[t].reflect,a);r=CubismMath.degreesToRadian(-s.angle),o.x=o.x*CubismMath.cos(r)-o.y*CubismMath.sin(r),o.y=o.x*CubismMath.sin(r)+o.y*CubismMath.cos(r),updateParticles(n,p.particleCount,o,s.angle,this._options.wind,MovementThreshold*p.normalizationPosition.maximum,t,AirResistance);for(let t=0;t<p.outputCount;++t){var C=c[t].vertexIndex;if(-1==c[t].destinationParameterIndex&&(c[t].destinationParameterIndex=e.getParameterIndex(c[t].destination.id)),!(C<1||C>=p.particleCount)){var d=new CubismVector2,C=(d.x=n[C].position.x-n[C-1].position.x,d.y=n[C].position.y-n[C-1].position.y,d=c[t].getValue(d,n,C,c[t].reflect,this._options.gravity),this._currentRigOutputs.at(i).outputs.set(t,d),c[t].destinationParameterIndex),_=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(this._parameterCaches.subarray(C))):this._parameterCaches.slice(C);updateOutputParameterValue(_,h[C],m[C],d,c[t]);for(let t=C,i=0;t<this._parameterCaches.length;t++,i++)this._parameterCaches[t]=_[i]}}}this._currentRemainTime-=t}var b=this._currentRemainTime/t;this.interpolate(e,b)}}interpolate(t,e){var s,a,r=t.getModel().parameters.values,u=t.getModel().parameters.maximumValues,n=t.getModel().parameters.minimumValues;for(let i=0;i<this._physicsRig.subRigCount;++i){a=this._physicsRig.settings.at(i),s=this._physicsRig.outputs.get(a.baseOutputIndex);for(let t=0;t<a.outputCount;++t)if(-1!=s[t].destinationParameterIndex){var o=s[t].destinationParameterIndex,p=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(r.subarray(o))):r.slice(o);updateOutputParameterValue(p,n[o],u[o],this._previousRigOutputs.at(i).outputs.at(t)*(1-e)+this._currentRigOutputs.at(i).outputs.at(t)*e,s[t]);for(let t=o,i=0;t<r.length;t++,i++)r[t]=p[i]}}}setOptions(t){this._options=t}getOption(){return this._options}constructor(){this._physicsRig=null,this._options=new Options,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0,this._currentRigOutputs=new csmVector,this._previousRigOutputs=new csmVector,this._currentRemainTime=0,this._parameterCaches=null,this._parameterInputCaches=null}release(){this._physicsRig=void 0,this._physicsRig=null}initialize(){var i,e,s;for(let t=0;t<this._physicsRig.subRigCount;++t){e=this._physicsRig.settings.at(t),(i=this._physicsRig.particles.get(e.baseParticleIndex))[0].initialPosition=new CubismVector2(0,0),i[0].lastPosition=new CubismVector2(i[0].initialPosition.x,i[0].initialPosition.y),i[0].lastGravity=new CubismVector2(0,-1),i[0].lastGravity.y*=-1,i[0].velocity=new CubismVector2(0,0),i[0].force=new CubismVector2(0,0);for(let t=1;t<e.particleCount;++t)(s=new CubismVector2(0,0)).y=i[t].radius,i[t].initialPosition=new CubismVector2(i[t-1].initialPosition.x+s.x,i[t-1].initialPosition.y+s.y),i[t].position=new CubismVector2(i[t].initialPosition.x,i[t].initialPosition.y),i[t].lastPosition=new CubismVector2(i[t].initialPosition.x,i[t].initialPosition.y),i[t].lastGravity=new CubismVector2(0,-1),i[t].lastGravity.y*=-1,i[t].velocity=new CubismVector2(0,0),i[t].force=new CubismVector2(0,0)}}}class Options{constructor(){this.gravity=new CubismVector2(0,0),this.wind=new CubismVector2(0,0)}}class PhysicsOutput{constructor(){this.outputs=new csmVector(0)}}function sign(t){let i=0;return 0<t?i=1:t<0&&(i=-1),i}function getInputTranslationXFromNormalizedParameterValue(t,i,e,s,a,r,u,n,o,p){t.x+=normalizeParameterValue(e,s,a,r,u.minimum,u.maximum,u.defalut,o)*p}function getInputTranslationYFromNormalizedParamterValue(t,i,e,s,a,r,u,n,o,p){t.y+=normalizeParameterValue(e,s,a,r,u.minimum,u.maximum,u.defalut,o)*p}function getInputAngleFromNormalizedParameterValue(t,i,e,s,a,r,u,n,o,p){i.angle+=normalizeParameterValue(e,s,a,r,n.minimum,n.maximum,n.defalut,o)*p}function getOutputTranslationX(t,i,e,s,a){let r=t.x;return s&&(r*=-1),r}function getOutputTranslationY(t,i,e,s,a){let r=t.y;return s&&(r*=-1),r}function getOutputAngle(t,i,e,s,a){let r;return a=2<=e?i[e-1].position.substract(i[e-2].position):a.multiplyByScaler(-1),r=CubismMath.directionToRadian(a,t),s&&(r*=-1),r}function getRangeValue(t,i){var e=CubismMath.max(t,i),t=CubismMath.min(t,i);return CubismMath.abs(e-t)}function getDefaultValue(t,i){return CubismMath.min(t,i)+getRangeValue(t,i)/2}function getOutputScaleTranslationX(t,i){return JSON.parse(JSON.stringify(t.x))}function getOutputScaleTranslationY(t,i){return JSON.parse(JSON.stringify(t.y))}function getOutputScaleAngle(t,i){return JSON.parse(JSON.stringify(i))}function updateParticles(i,e,t,s,a,r,u,n){var o,p,c,l=new CubismVector2(0,0),m=(new CubismVector2(0,0),new CubismVector2(0,0),new CubismVector2(0,0)),t=(i[0].position=new CubismVector2(t.x,t.y),CubismMath.degreesToRadian(s)),h=CubismMath.radianToDirection(t);h.normalize();for(let t=1;t<e;++t)i[t].force=h.multiplyByScaler(i[t].acceleration).add(a),i[t].lastPosition=new CubismVector2(i[t].position.x,i[t].position.y),o=i[t].delay*u*30,l=i[t].position.substract(i[t-1].position),p=CubismMath.directionToRadian(i[t].lastGravity,h)/n,l.x=CubismMath.cos(p)*l.x-l.y*CubismMath.sin(p),l.y=CubismMath.sin(p)*l.x+l.y*CubismMath.cos(p),i[t].position=i[t-1].position.add(l),p=i[t].velocity.multiplyByScaler(o),c=i[t].force.multiplyByScaler(o).multiplyByScaler(o),i[t].position=i[t].position.add(p).add(c),(m=i[t].position.substract(i[t-1].position)).normalize(),i[t].position=i[t-1].position.add(m.multiplyByScaler(i[t].radius)),CubismMath.abs(i[t].position.x)<r&&(i[t].position.x=0),0!=o&&(i[t].velocity=i[t].position.substract(i[t].lastPosition),i[t].velocity=i[t].velocity.divisionByScalar(o),i[t].velocity=i[t].velocity.multiplyByScaler(i[t].mobility)),i[t].force=new CubismVector2(0,0),i[t].lastGravity=new CubismVector2(h.x,h.y)}function updateParticlesForStabilization(i,e,t,s,a,r){let u=new CubismVector2(0,0);i[0].position=new CubismVector2(t.x,t.y);var t=CubismMath.degreesToRadian(s),n=CubismMath.radianToDirection(t);n.normalize();for(let t=1;t<e;++t)i[t].force=n.multiplyByScaler(i[t].acceleration).add(a),i[t].lastPosition=new CubismVector2(i[t].position.x,i[t].position.y),i[t].velocity=new CubismVector2(0,0),(u=i[t].force).normalize(),u=u.multiplyByScaler(i[t].radius),i[t].position=i[t-1].position.add(u),CubismMath.abs(i[t].position.x)<r&&(i[t].position.x=0),i[t].force=new CubismVector2(0,0),i[t].lastGravity=new CubismVector2(n.x,n.y)}function updateOutputParameterValue(t,i,e,s,a){let r;var u=a.getScale(a.translationScale,a.angleScale),s=((r=s*u)<i?(r<a.valueBelowMinimum&&(a.valueBelowMinimum=r),r=i):r>e&&(r>a.valueExceededMaximum&&(a.valueExceededMaximum=r),r=e),a.weight/MaximumWeight);1<=s||(r=t[0]*(1-s)+r*s),t[0]=r}function normalizeParameterValue(t,i,e,s,a,r,u,n){let o=0;var p=CubismMath.max(e,i),c=(p<t&&(t=p),CubismMath.min(e,i)),l=(t<c&&(t=c),CubismMath.min(a,r)),m=CubismMath.max(a,r),h=u,g=getDefaultValue(c,p),y=t-g;switch(sign(y)){case 1:var C=p-g;0!=C&&(o=(m-h)/C*y,o+=h);break;case-1:C=c-g;0!=C&&(o=(l-h)/C*y,o+=h);break;case 0:o=h}return n?o:-1*o}import*as $ from"./cubismphysics";var Live2DCubismFramework;(t=>{t.CubismPhysics=$.CubismPhysics,t.Options=$.Options})(Live2DCubismFramework=Live2DCubismFramework||{});export{CubismPhysics,Options,PhysicsOutput,Live2DCubismFramework};