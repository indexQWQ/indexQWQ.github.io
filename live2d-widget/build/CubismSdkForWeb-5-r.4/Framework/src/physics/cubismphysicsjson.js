import{CubismFramework}from"../live2dcubismframework";import{CubismVector2}from"../math/cubismvector2";import{CubismJson}from"../utils/cubismjson";let Position="Position",X="X",Y="Y",Angle="Angle",Type="Type",Id="Id",Meta="Meta",EffectiveForces="EffectiveForces",TotalInputCount="TotalInputCount",TotalOutputCount="TotalOutputCount",PhysicsSettingCount="PhysicsSettingCount",Gravity="Gravity",Wind="Wind",VertexCount="VertexCount",Fps="Fps",PhysicsSettings="PhysicsSettings",Normalization="Normalization",Minimum="Minimum",Maximum="Maximum",Default="Default",Reflect="Reflect",Weight="Weight",Input="Input",Source="Source",Output="Output",Scale="Scale",VertexIndex="VertexIndex",Destination="Destination",Vertices="Vertices",Mobility="Mobility",Delay="Delay",Radius="Radius",Acceleration="Acceleration";class CubismPhysicsJson{constructor(t,e){this._json=CubismJson.create(t,e)}release(){CubismJson.delete(this._json)}getGravity(){var t=new CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(X).toFloat(),t.y=this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Gravity).getValueByString(Y).toFloat(),t}getWind(){var t=new CubismVector2(0,0);return t.x=this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(X).toFloat(),t.y=this._json.getRoot().getValueByString(Meta).getValueByString(EffectiveForces).getValueByString(Wind).getValueByString(Y).toFloat(),t}getFps(){return this._json.getRoot().getValueByString(Meta).getValueByString(Fps).toFloat(0)}getSubRigCount(){return this._json.getRoot().getValueByString(Meta).getValueByString(PhysicsSettingCount).toInt()}getTotalInputCount(){return this._json.getRoot().getValueByString(Meta).getValueByString(TotalInputCount).toInt()}getTotalOutputCount(){return this._json.getRoot().getValueByString(Meta).getValueByString(TotalOutputCount).toInt()}getVertexCount(){return this._json.getRoot().getValueByString(Meta).getValueByString(VertexCount).toInt()}getNormalizationPositionMinimumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Position).getValueByString(Minimum).toFloat()}getNormalizationPositionMaximumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Position).getValueByString(Maximum).toFloat()}getNormalizationPositionDefaultValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Position).getValueByString(Default).toFloat()}getNormalizationAngleMinimumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Angle).getValueByString(Minimum).toFloat()}getNormalizationAngleMaximumValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Angle).getValueByString(Maximum).toFloat()}getNormalizationAngleDefaultValue(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Normalization).getValueByString(Angle).getValueByString(Default).toFloat()}getInputCount(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getVector().getSize()}getInputWeight(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Weight).toFloat()}getInputReflect(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Reflect).toBoolean()}getInputType(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Type).getRawString()}getInputSourceId(t,e){return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Input).getValueByIndex(e).getValueByString(Source).getValueByString(Id).getRawString())}getOutputCount(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getVector().getSize()}getOutputVertexIndex(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(VertexIndex).toInt()}getOutputAngleScale(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Scale).toFloat()}getOutputWeight(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Weight).toFloat()}getOutputDestinationId(t,e){return CubismFramework.getIdManager().getId(this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Destination).getValueByString(Id).getRawString())}getOutputType(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Type).getRawString()}getOutputReflect(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Output).getValueByIndex(e).getValueByString(Reflect).toBoolean()}getParticleCount(t){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getVector().getSize()}getParticleMobility(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Mobility).toFloat()}getParticleDelay(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Delay).toFloat()}getParticleAcceleration(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Acceleration).toFloat()}getParticleRadius(t,e){return this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Radius).toFloat()}getParticlePosition(t,e){var g=new CubismVector2(0,0);return g.x=this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Position).getValueByString(X).toFloat(),g.y=this._json.getRoot().getValueByString(PhysicsSettings).getValueByIndex(t).getValueByString(Vertices).getValueByIndex(e).getValueByString(Position).getValueByString(Y).toFloat(),g}}import*as $ from"./cubismphysicsjson";var Live2DCubismFramework;(Live2DCubismFramework=Live2DCubismFramework||{}).CubismPhysicsJson=$.CubismPhysicsJson;export{CubismPhysicsJson,Live2DCubismFramework};