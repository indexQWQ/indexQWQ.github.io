class CubismVector2{constructor(t,i){this.x=t,this.y=i,this.x=null==t?0:t,this.y=null==i?0:i}add(t){var i=new CubismVector2(0,0);return i.x=this.x+t.x,i.y=this.y+t.y,i}substract(t){var i=new CubismVector2(0,0);return i.x=this.x-t.x,i.y=this.y-t.y,i}multiply(t){var i=new CubismVector2(0,0);return i.x=this.x*t.x,i.y=this.y*t.y,i}multiplyByScaler(t){return this.multiply(new CubismVector2(t,t))}division(t){var i=new CubismVector2(0,0);return i.x=this.x/t.x,i.y=this.y/t.y,i}divisionByScalar(t){return this.division(new CubismVector2(t,t))}getLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}getDistanceWith(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))}dot(t){return this.x*t.x+this.y*t.y}normalize(){var t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t}isEqual(t){return this.x==t.x&&this.y==t.y}isNotEqual(t){return!this.isEqual(t)}}import*as $ from"./cubismvector2";var Live2DCubismFramework;(Live2DCubismFramework=Live2DCubismFramework||{}).CubismVector2=$.CubismVector2;export{CubismVector2,Live2DCubismFramework};