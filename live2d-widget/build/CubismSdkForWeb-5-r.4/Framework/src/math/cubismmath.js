import{CubismVector2}from"./cubismvector2";class CubismMath{static range(t,i,a){return t<i?t=i:a<t&&(t=a),t}static sin(t){return Math.sin(t)}static cos(t){return Math.cos(t)}static abs(t){return Math.abs(t)}static sqrt(t){return Math.sqrt(t)}static cbrt(t){if(0===t)return t;let i=t;t=i<0;t&&(i=-i);let a;return a=i===1/0?1/0:(a=Math.exp(Math.log(i)/3),(i/(a*a)+2*a)/3),t?-a:a}static getEasingSine(t){return t<0?0:1<t?1:.5-.5*this.cos(t*Math.PI)}static max(t,i){return i<t?t:i}static min(t,i){return i<t?i:t}static clamp(t,i,a){return t<i?i:a<t?a:t}static degreesToRadian(t){return t/180*Math.PI}static radianToDegrees(t){return 180*t/Math.PI}static directionToRadian(t,i){let a=Math.atan2(i.y,i.x)-Math.atan2(t.y,t.x);for(;a<-Math.PI;)a+=2*Math.PI;for(;a>Math.PI;)a-=2*Math.PI;return a}static directionToDegrees(t,i){var a=this.directionToRadian(t,i);let r=this.radianToDegrees(a);return r=0<i.x-t.x?-r:r}static radianToDirection(t){var i=new CubismVector2;return i.x=this.sin(t),i.y=this.cos(t),i}static quadraticEquation(t,i,a){return this.abs(t)<CubismMath.Epsilon?this.abs(i)<CubismMath.Epsilon?-a:-a/i:-(i+this.sqrt(i*i-4*t*a))/(2*t)}static cardanoAlgorithmForBezier(t,a,i,r){if(this.abs(t)<CubismMath.Epsilon)return this.range(this.quadraticEquation(a,i,r),0,1);var a=a/t,i=i/t,s=(3*i-a*a)/3,e=s/3,i=(2*a*a*a-9*a*i+27*(r/t))/27,r=i/2,t=r*r+e*e*e;if(t<0){var e=-s/3,s=this.sqrt(e*e*e),e=this.range(-i/(2*s),-1,1),i=Math.acos(e),e=2*this.cbrt(s);let t=e*this.cos(i/3)-a/3;return this.abs(t-.5)<.51?this.range(t,0,1):(s=e*this.cos((i+2*Math.PI)/3)-a/3,this.abs(s-.5)<.51?this.range(s,0,1):(s=e*this.cos((i+4*Math.PI)/3)-a/3,this.range(s,0,1)))}if(0==t){let t,i=2*(t=r<0?this.cbrt(-r):-this.cbrt(r))-a/3;return this.abs(i-.5)<.51?this.range(i,0,1):(e=-t-a/3,this.range(e,0,1))}i=this.sqrt(t);let h=this.cbrt(i-r)-this.cbrt(i+r)-a/3;return this.range(h,0,1)}static mod(t,i){var a;return!isFinite(t)||0===i||isNaN(t)||isNaN(i)?(console.warn(`divided: ${t}, divisor: ${i} mod() returns 'NaN'.`),NaN):(a=Math.abs(t),i=Math.abs(i),(a-Math.floor(a/i)*i)*Math.sign(t))}constructor(){}}CubismMath.Epsilon=1e-5;import*as $ from"./cubismmath";var Live2DCubismFramework;(Live2DCubismFramework=Live2DCubismFramework||{}).CubismMath=$.CubismMath;export{CubismMath,Live2DCubismFramework};