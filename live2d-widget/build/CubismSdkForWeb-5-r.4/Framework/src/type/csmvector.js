class csmVector{constructor(t=0){t<1?(this._ptr=[],this._capacity=0):(this._ptr=new Array(t),this._capacity=t),this._size=0}at(t){return this._ptr[t]}set(t,e){this._ptr[t]=e}get(e=0){var i=new Array;for(let t=e;t<this._size;t++)i.push(this._ptr[t]);return i}pushBack(t){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?csmVector.DefaultSize:2*this._capacity),this._ptr[this._size++]=t}clear(){this._ptr.length=0,this._size=0}getSize(){return this._size}assign(e,i){this._size<e&&this.prepareCapacity(e);for(let t=0;t<e;t++)this._ptr[t]=i;this._size=e}resize(t,e=null){this.updateSize(t,e,!0)}updateSize(e,i=null,t=!0){if(this._size<e)if(this.prepareCapacity(e),t)for(let t=this._size;t<e;t++)this._ptr[t]="function"==typeof i?JSON.parse(JSON.stringify(new i)):i;else for(let t=this._size;t<e;t++)this._ptr[t]=i;else{t=this._size-e;this._ptr.splice(this._size-t,t)}this._size=e}insert(e,i,t){let r=e._index;var e=i._index,s=t._index,t=s-e,h=(this.prepareCapacity(this._size+t),this._size-r);if(0<h)for(let t=0;t<h;t++)this._ptr.splice(r+t,0,null);for(let t=e;t<s;t++,r++)this._ptr[r]=i._vector._ptr[t];this._size=this._size+t}remove(t){return!(t<0||this._size<=t||(this._ptr.splice(t,1),--this._size,0))}erase(t){var e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new iterator(this,e))}prepareCapacity(t){t>this._capacity&&(0==this._capacity?this._ptr=new Array(t):this._ptr.length=t,this._capacity=t)}begin(){return 0==this._size?this.end():new iterator(this,0)}end(){return new iterator(this,this._size)}getOffset(t){var e=new csmVector;return e._ptr=this.get(t),e._size=this.get(t).length,e._capacity=this.get(t).length,e}}csmVector.DefaultSize=10;class iterator{constructor(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}set(t){return this._index=t._index,this._vector=t._vector,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new iterator(this._vector,this._index++)}decrement(){return new iterator(this._vector,this._index--)}ptr(){return this._vector._ptr[this._index]}substitution(t){return this._index=t._index,this._vector=t._vector,this}notEqual(t){return this._index!=t._index||this._vector!=t._vector}}import*as $ from"./csmvector";var Live2DCubismFramework;(t=>{t.csmVector=$.csmVector,t.iterator=$.iterator})(Live2DCubismFramework=Live2DCubismFramework||{});export{csmVector,iterator,Live2DCubismFramework};