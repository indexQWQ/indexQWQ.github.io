import{CubismLogDebug,CubismLogWarning}from"../utils/cubismdebug";class csmPair{constructor(e,s){this.first=null==e?null:e,this.second=null==s?null:s}}class csmMap{constructor(e){null==e||e<1?(this._keyValues=[],this._dummyValue=null,this._size=0):(this._keyValues=new Array(e),this._size=e)}release(){this.clear()}appendKey(s){let i=-1;for(let e=0;e<this._size;e++)if(this._keyValues[e].first==s){i=e;break}-1!=i?CubismLogWarning("The key `{0}` is already append.",s):(this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new csmPair(s),this._size+=1)}getValue(s){let i=-1;for(let e=0;e<this._size;e++)if(this._keyValues[e].first==s){i=e;break}return(0<=i?this._keyValues[i]:(this.appendKey(s),this._keyValues[this._size-1])).second}setValue(s,e){let i=-1;for(let e=0;e<this._size;e++)if(this._keyValues[e].first==s){i=e;break}0<=i?this._keyValues[i].second=e:(this.appendKey(s),this._keyValues[this._size-1].second=e)}isExist(s){for(let e=0;e<this._size;e++)if(this._keyValues[e].first==s)return!0;return!1}clear(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0}getSize(){return this._size}prepareCapacity(e,s){e>this._keyValues.length&&(0==this._keyValues.length?!s&&e<csmMap.DefaultSize&&(e=csmMap.DefaultSize):!s&&e<2*this._keyValues.length&&(e=2*this._keyValues.length),this._keyValues.length=e)}begin(){return new iterator(this,0)}end(){return new iterator(this,this._size)}erase(e){var s=e._index;return s<0||this._size<=s?e:(this._keyValues.splice(s,1),--this._size,new iterator(this,s))}dumpAsInt(){for(let e=0;e<this._size;e++)CubismLogDebug("{0} ,",this._keyValues[e]),CubismLogDebug("\n")}}csmMap.DefaultSize=10;class iterator{constructor(e,s){this._map=null!=e?e:new csmMap,this._index=null!=s?s:0}set(e){return this._index=e._index,this._map=e._map,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new iterator(this._map,this._index++)}decrement(){var e=new iterator(this._map,this._index);return this._map=e._map,this._index=e._index,this}ptr(){return this._map._keyValues[this._index]}notEqual(e){return this._index!=e._index||this._map!=e._map}}import*as $ from"./csmmap";var Live2DCubismFramework;(e=>{e.csmMap=$.csmMap,e.csmPair=$.csmPair,e.iterator=$.iterator})(Live2DCubismFramework=Live2DCubismFramework||{});export{csmPair,csmMap,iterator,Live2DCubismFramework};