import { CubismBreath } from '../effect/cubismbreath';
import { CubismEyeBlink } from '../effect/cubismeyeblink';
import { CubismPose } from '../effect/cubismpose';
import { ICubismModelSetting } from '../icubismmodelsetting';
import { CubismIdHandle } from '../id/cubismid';
import { CubismModelMatrix } from '../math/cubismmodelmatrix';
import { CubismTargetPoint } from '../math/cubismtargetpoint';
import { ACubismMotion, BeganMotionCallback, FinishedMotionCallback } from '../motion/acubismmotion';
import { CubismExpressionMotionManager } from '../motion/cubismexpressionmotionmanager';
import { CubismMotion } from '../motion/cubismmotion';
import { CubismMotionManager } from '../motion/cubismmotionmanager';
import { CubismMotionQueueManager } from '../motion/cubismmotionqueuemanager';
import { CubismPhysics } from '../physics/cubismphysics';
import { CubismRenderer_WebGL } from '../rendering/cubismrenderer_webgl';
import { csmString } from '../type/csmstring';
import { CubismMoc } from './cubismmoc';
import { CubismModel } from './cubismmodel';
import { CubismModelUserData } from './cubismmodeluserdata';
export declare class CubismUserModel {
    isInitialized(): boolean;
    setInitialized(v: boolean): void;
    isUpdating(): boolean;
    setUpdating(v: boolean): void;
    setDragging(x: number, y: number): void;
    setAcceleration(x: number, y: number, z: number): void;
    getModelMatrix(): CubismModelMatrix;
    setOpacity(a: number): void;
    getOpacity(): number;
    loadModel(buffer: ArrayBuffer, shouldCheckMocConsistency?: boolean): void;
    loadMotion(buffer: ArrayBuffer, size: number, name: string, onFinishedMotionHandler?: FinishedMotionCallback, onBeganMotionHandler?: BeganMotionCallback, modelSetting?: ICubismModelSetting, group?: string, index?: number, shouldCheckMotionConsistency?: boolean): CubismMotion;
    loadExpression(buffer: ArrayBuffer, size: number, name: string): ACubismMotion;
    loadPose(buffer: ArrayBuffer, size: number): void;
    loadUserData(buffer: ArrayBuffer, size: number): void;
    loadPhysics(buffer: ArrayBuffer, size: number): void;
    isHit(drawableId: CubismIdHandle, pointX: number, pointY: number): boolean;
    getModel(): CubismModel;
    getRenderer(): CubismRenderer_WebGL;
    createRenderer(maskBufferCount?: number): void;
    deleteRenderer(): void;
    motionEventFired(eventValue: csmString): void;
    static cubismDefaultMotionEventCallback(caller: CubismMotionQueueManager, eventValue: csmString, customData: CubismUserModel): void;
    constructor();
    release(): void;
    protected _moc: CubismMoc;
    protected _model: CubismModel;
    protected _motionManager: CubismMotionManager;
    protected _expressionManager: CubismExpressionMotionManager;
    protected _eyeBlink: CubismEyeBlink;
    protected _breath: CubismBreath;
    protected _modelMatrix: CubismModelMatrix;
    protected _pose: CubismPose;
    protected _dragManager: CubismTargetPoint;
    protected _physics: CubismPhysics;
    protected _modelUserData: CubismModelUserData;
    protected _initialized: boolean;
    protected _updating: boolean;
    protected _opacity: number;
    protected _lipsync: boolean;
    protected _lastLipSyncValue: number;
    protected _dragX: number;
    protected _dragY: number;
    protected _accelerationX: number;
    protected _accelerationY: number;
    protected _accelerationZ: number;
    protected _mocConsistency: boolean;
    protected _motionConsistency: boolean;
    protected _debugMode: boolean;
    private _renderer;
}
import * as $ from './cubismusermodel';
export declare namespace Live2DCubismFramework {
    const CubismUserModel: typeof $.CubismUserModel;
    type CubismUserModel = $.CubismUserModel;
}
