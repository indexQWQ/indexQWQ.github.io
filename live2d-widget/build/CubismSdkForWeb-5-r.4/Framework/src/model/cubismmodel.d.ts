import { CubismIdHandle } from '../id/cubismid';
import { CubismBlendMode, CubismTextureColor } from '../rendering/cubismrenderer';
import { csmVector } from '../type/csmvector';
export declare class ParameterRepeatData {
    constructor(isOverridden?: boolean, isParameterRepeated?: boolean);
    isOverridden: boolean;
    isParameterRepeated: boolean;
}
export declare class DrawableColorData {
    constructor(isOverridden?: boolean, color?: CubismTextureColor);
    isOverridden: boolean;
    color: CubismTextureColor;
    get isOverwritten(): boolean;
}
export declare class PartColorData {
    constructor(isOverridden?: boolean, color?: CubismTextureColor);
    isOverridden: boolean;
    color: CubismTextureColor;
    get isOverwritten(): boolean;
}
export declare class DrawableCullingData {
    constructor(isOverridden?: boolean, isCulling?: boolean);
    isOverridden: boolean;
    isCulling: boolean;
    get isOverwritten(): boolean;
}
export declare class CubismModel {
    update(): void;
    getPixelsPerUnit(): number;
    getCanvasWidth(): number;
    getCanvasHeight(): number;
    saveParameters(): void;
    getMultiplyColor(index: number): CubismTextureColor;
    getScreenColor(index: number): CubismTextureColor;
    setMultiplyColorByTextureColor(index: number, color: CubismTextureColor): void;
    setMultiplyColorByRGBA(index: number, r: number, g: number, b: number, a?: number): void;
    setScreenColorByTextureColor(index: number, color: CubismTextureColor): void;
    setScreenColorByRGBA(index: number, r: number, g: number, b: number, a?: number): void;
    getPartMultiplyColor(partIndex: number): CubismTextureColor;
    getPartScreenColor(partIndex: number): CubismTextureColor;
    setPartColor(partIndex: number, r: number, g: number, b: number, a: number, partColors: csmVector<PartColorData>, drawableColors: csmVector<DrawableColorData>): void;
    setPartMultiplyColorByTextureColor(partIndex: number, color: CubismTextureColor): void;
    setPartMultiplyColorByRGBA(partIndex: number, r: number, g: number, b: number, a: number): void;
    setPartScreenColorByTextureColor(partIndex: number, color: CubismTextureColor): void;
    setPartScreenColorByRGBA(partIndex: number, r: number, g: number, b: number, a: number): void;
    getOverrideFlagForModelParameterRepeat(): boolean;
    setOverrideFlagForModelParameterRepeat(isRepeat: boolean): void;
    getOverrideFlagForParameterRepeat(parameterIndex: number): boolean;
    setOverrideFlagForParameterRepeat(parameterIndex: number, value: boolean): void;
    getRepeatFlagForParameterRepeat(parameterIndex: number): boolean;
    setRepeatFlagForParameterRepeat(parameterIndex: number, value: boolean): void;
    getOverwriteFlagForModelMultiplyColors(): boolean;
    getOverrideFlagForModelMultiplyColors(): boolean;
    getOverwriteFlagForModelScreenColors(): boolean;
    getOverrideFlagForModelScreenColors(): boolean;
    setOverwriteFlagForModelMultiplyColors(value: boolean): void;
    setOverrideFlagForModelMultiplyColors(value: boolean): void;
    setOverwriteFlagForModelScreenColors(value: boolean): void;
    setOverrideFlagForModelScreenColors(value: boolean): void;
    getOverwriteFlagForDrawableMultiplyColors(drawableindex: number): boolean;
    getOverrideFlagForDrawableMultiplyColors(drawableindex: number): boolean;
    getOverwriteFlagForDrawableScreenColors(drawableindex: number): boolean;
    getOverrideFlagForDrawableScreenColors(drawableindex: number): boolean;
    setOverwriteFlagForDrawableMultiplyColors(drawableindex: number, value: boolean): void;
    setOverrideFlagForDrawableMultiplyColors(drawableindex: number, value: boolean): void;
    setOverwriteFlagForDrawableScreenColors(drawableindex: number, value: boolean): void;
    setOverrideFlagForDrawableScreenColors(drawableindex: number, value: boolean): void;
    getOverwriteColorForPartMultiplyColors(partIndex: number): boolean;
    getOverrideColorForPartMultiplyColors(partIndex: number): boolean;
    getOverwriteColorForPartScreenColors(partIndex: number): boolean;
    getOverrideColorForPartScreenColors(partIndex: number): boolean;
    setOverwriteColorForPartColors(partIndex: number, value: boolean, partColors: csmVector<PartColorData>, drawableColors: csmVector<DrawableColorData>): void;
    setOverrideColorForPartColors(partIndex: number, value: boolean, partColors: csmVector<PartColorData>, drawableColors: csmVector<DrawableColorData>): void;
    setOverwriteColorForPartMultiplyColors(partIndex: number, value: boolean): void;
    setOverrideColorForPartMultiplyColors(partIndex: number, value: boolean): void;
    setOverwriteColorForPartScreenColors(partIndex: number, value: boolean): void;
    setOverrideColorForPartScreenColors(partIndex: number, value: boolean): void;
    getDrawableCulling(drawableIndex: number): boolean;
    setDrawableCulling(drawableIndex: number, isCulling: boolean): void;
    getOverwriteFlagForModelCullings(): boolean;
    getOverrideFlagForModelCullings(): boolean;
    setOverwriteFlagForModelCullings(isOverriddenCullings: boolean): void;
    setOverrideFlagForModelCullings(isOverriddenCullings: boolean): void;
    getOverwriteFlagForDrawableCullings(drawableIndex: number): boolean;
    getOverrideFlagForDrawableCullings(drawableIndex: number): boolean;
    setOverwriteFlagForDrawableCullings(drawableIndex: number, isOverriddenCullings: boolean): void;
    setOverrideFlagForDrawableCullings(drawableIndex: number, isOverriddenCullings: boolean): void;
    getModelOapcity(): number;
    setModelOapcity(value: number): void;
    getModel(): Live2DCubismCore.Model;
    getPartIndex(partId: CubismIdHandle): number;
    getPartId(partIndex: number): CubismIdHandle;
    getPartCount(): number;
    getPartParentPartIndices(): Int32Array;
    setPartOpacityByIndex(partIndex: number, opacity: number): void;
    setPartOpacityById(partId: CubismIdHandle, opacity: number): void;
    getPartOpacityByIndex(partIndex: number): number;
    getPartOpacityById(partId: CubismIdHandle): number;
    getParameterIndex(parameterId: CubismIdHandle): number;
    getParameterCount(): number;
    getParameterType(parameterIndex: number): Live2DCubismCore.csmParameterType;
    getParameterMaximumValue(parameterIndex: number): number;
    getParameterMinimumValue(parameterIndex: number): number;
    getParameterDefaultValue(parameterIndex: number): number;
    getParameterId(parameterIndex: number): CubismIdHandle;
    getParameterValueByIndex(parameterIndex: number): number;
    getParameterValueById(parameterId: CubismIdHandle): number;
    setParameterValueByIndex(parameterIndex: number, value: number, weight?: number): void;
    setParameterValueById(parameterId: CubismIdHandle, value: number, weight?: number): void;
    addParameterValueByIndex(parameterIndex: number, value: number, weight?: number): void;
    addParameterValueById(parameterId: any, value: number, weight?: number): void;
    isRepeat(parameterIndex: number): boolean;
    getParameterRepeatValue(parameterIndex: number, value: number): number;
    getParameterClampValue(parameterIndex: number, value: number): number;
    getParameterRepeats(parameterIndex: number): boolean;
    multiplyParameterValueById(parameterId: CubismIdHandle, value: number, weight?: number): void;
    multiplyParameterValueByIndex(parameterIndex: number, value: number, weight?: number): void;
    getDrawableIndex(drawableId: CubismIdHandle): number;
    getDrawableCount(): number;
    getDrawableId(drawableIndex: number): CubismIdHandle;
    getDrawableRenderOrders(): Int32Array;
    getDrawableTextureIndices(drawableIndex: number): number;
    getDrawableTextureIndex(drawableIndex: number): number;
    getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex: number): boolean;
    getDrawableVertexIndexCount(drawableIndex: number): number;
    getDrawableVertexCount(drawableIndex: number): number;
    getDrawableVertices(drawableIndex: number): Float32Array;
    getDrawableVertexIndices(drawableIndex: number): Uint16Array;
    getDrawableVertexPositions(drawableIndex: number): Float32Array;
    getDrawableVertexUvs(drawableIndex: number): Float32Array;
    getDrawableOpacity(drawableIndex: number): number;
    getDrawableMultiplyColor(drawableIndex: number): CubismTextureColor;
    getDrawableScreenColor(drawableIndex: number): CubismTextureColor;
    getDrawableParentPartIndex(drawableIndex: number): number;
    getDrawableBlendMode(drawableIndex: number): CubismBlendMode;
    getDrawableInvertedMaskBit(drawableIndex: number): boolean;
    getDrawableMasks(): Int32Array[];
    getDrawableMaskCounts(): Int32Array;
    isUsingMasking(): boolean;
    getDrawableDynamicFlagIsVisible(drawableIndex: number): boolean;
    getDrawableDynamicFlagVisibilityDidChange(drawableIndex: number): boolean;
    getDrawableDynamicFlagOpacityDidChange(drawableIndex: number): boolean;
    getDrawableDynamicFlagRenderOrderDidChange(drawableIndex: number): boolean;
    getDrawableDynamicFlagBlendColorDidChange(drawableIndex: number): boolean;
    loadParameters(): void;
    initialize(): void;
    constructor(model: Live2DCubismCore.Model);
    release(): void;
    private _notExistPartOpacities;
    private _notExistPartId;
    private _notExistParameterValues;
    private _notExistParameterId;
    private _savedParameters;
    private _isOverriddenParameterRepeat;
    private _isOverriddenModelMultiplyColors;
    private _isOverriddenModelScreenColors;
    private _userParameterRepeatDataList;
    private _userMultiplyColors;
    private _userScreenColors;
    private _userPartScreenColors;
    private _userPartMultiplyColors;
    private _partChildDrawables;
    private _model;
    private _parameterValues;
    private _parameterMaximumValues;
    private _parameterMinimumValues;
    private _partOpacities;
    private _modelOpacity;
    private _parameterIds;
    private _partIds;
    private _drawableIds;
    private _isOverriddenCullings;
    private _userCullings;
}
import * as $ from './cubismmodel';
export declare namespace Live2DCubismFramework {
    const CubismModel: typeof $.CubismModel;
    type CubismModel = $.CubismModel;
}
