<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2025/10/26/Linux/"/>
    <url>/2025/10/26/Linux/</url>
    
    <content type="html"><![CDATA[<p>这篇文章是关于Linux的学习笔记</p><h3 id="Linux命令基础格式"><a href="#Linux命令基础格式" class="headerlink" title="Linux命令基础格式"></a>Linux命令基础格式</h3><p>通用格式：<code>command [-options][parameter]</code></p><ul><li><p>command：命令本身</p></li><li><p>-options：[可选择填]命令的一些选项，可以通过选项控制命令的行为细节</p></li><li><p>parameter：[可选择填]命令的参数，大多数用于命令的指向目标</p></li></ul><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>语法：<code>ls [-a -l -h][Linux路径]</code></p><p>当不使用选项和参数，直接使用命令本体，表示：以平铺的形式，列出当前工作目录下的内容</p><ul><li>HOME目录：每个Linux操作用户在Linux系统的个人账户目录，路径在：&#x2F;home&#x2F;用户名</li></ul><h4 id="a：all的意思，即列出全部文件（包括隐藏的文件-文件夹）"><a href="#a：all的意思，即列出全部文件（包括隐藏的文件-文件夹）" class="headerlink" title="-a：all的意思，即列出全部文件（包括隐藏的文件&#x2F;文件夹）"></a>-a：all的意思，即列出全部文件（包括隐藏的文件&#x2F;文件夹）</h4><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/-a.png"></p><p>可以看到图中列出的内容变多了</p><ul><li><p>图中以.开头的，表示是Linux系统的隐藏文件</p></li><li><p>只有通过-a选项才能看到这些隐藏的文件</p></li></ul><h4 id="l：以列表（竖向排列）的形式展示内容，并展示更多信息"><a href="#l：以列表（竖向排列）的形式展示内容，并展示更多信息" class="headerlink" title="-l：以列表（竖向排列）的形式展示内容，并展示更多信息"></a>-l：以列表（竖向排列）的形式展示内容，并展示更多信息</h4><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/-l.png"></p><p><em><strong>ls的命令选项的组合使用：</strong></em></p><ul><li><p>ls -l -a</p></li><li><p>ls -la</p></li><li><p>ls -al</p></li></ul><p>上面的三种写法都是一样的，表示同时应用-l和-a的功能</p><p>除了选项本身可以组合以外，选项和参数也可以一起使用。</p><h4 id="h：表示以易于阅读的形式，列出文件大小，如K、M、G"><a href="#h：表示以易于阅读的形式，列出文件大小，如K、M、G" class="headerlink" title="-h：表示以易于阅读的形式，列出文件大小，如K、M、G"></a>-h：表示以易于阅读的形式，列出文件大小，如K、M、G</h4><p>-h与-l搭配一起才能展示文件的大小</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/-h.png"></p><h3 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h3><p>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工作目录</p><p>我们可以通过cd命令，更改当前所在的工作目录</p><p>cd命令来自：<em><strong>Change Directory</strong></em></p><p>语法：<code>cd [LInux路径]</code></p><ul><li><p>cd命令无需选项，只有参数，表示要切换到哪个目录下</p></li><li><p>cd命令直接执行，不写参数，表示回到用户的HOME目录</p></li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/cd.png"></p><h3 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h3><p>通过ls来验证当前的工作目录，其实是不恰当的</p><p>我们可以通过pwd命令，来查看当前所在的工作目录</p><p>pwd命令来自：<em><strong>Print Work Directory</strong></em></p><p>语法：pwd</p><ul><li>pwd命令，无选项，无命令，直接输入即可</li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/pwd.png"></p><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p>cd &#x2F;home&#x2F;index&#x2F;Desktop    绝对路径</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/AbsolutePath.png"></p><p>cd Desktop</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/RelativePaths.png"></p><p>绝对路径：以根目录为起点，描述路径的一种写法，路径描述以&#x2F;开头</p><p>相对路径：以当前目录为起点，描述路径的一种写法，路径描述无需以&#x2F;开头</p><h3 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h3><p>如果当前处于：&#x2F;home&#x2F;index&#x2F;Desktop</p><p>想要，向上回退一级，切换到&#x2F;home&#x2F;index中，怎么办呢？</p><ul><li><p>可以通过cd，即可以回到home目录</p></li><li><p>也可以通过特殊路径符来完成</p><ul><li><p>.  表示当前目录，比如cd .&#x2F;Desktop表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</p></li><li><p>.. 表示上一级目录，比如：cd .. 即可切换到上一级目录，cd ..&#x2F;.. 切换到上二级的目录</p></li><li><p>~ 表示home目录，cd ~ 即可切换到home目录 或 cd ~&#x2F;Desktop，切换到home内的Desktop目录</p></li></ul></li></ul><h3 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h3><p>通过mkdir命令可以创建新的目录（文件夹）</p><p>mkdir来自英文：<em><strong>Make Directory</strong></em></p><p>语法：<code>mkdir [-p] Linux路径</code></p><ul><li>-p可选填，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/mkdir-p.png"></p><ul><li>Linux表示要创建的文件夹的路径</li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/mkdir.png"></p><h3 id="touch-cat-more命令"><a href="#touch-cat-more命令" class="headerlink" title="touch-cat-more命令"></a>touch-cat-more命令</h3><h4 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h4><p>可以通过touch命令创建文件</p><p>语法：touch Linux路径</p><h4 id="cat查看文件内容"><a href="#cat查看文件内容" class="headerlink" title="cat查看文件内容"></a>cat查看文件内容</h4><p>有了文件后，我们可以通过cat命令查看文件的内容</p><p>不过，现在我们还没有学习vi编辑器，无法向文件内进行编辑内容，所以暂时我们只能通过图形化手动向文件内添加内容，来测试cat命令</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/cat.png"></p><h4 id="more查看文件内容"><a href="#more查看文件内容" class="headerlink" title="more查看文件内容"></a>more查看文件内容</h4><p>more于cat的不同在于：</p><ul><li><p>cat是直接将内容全部显示出来</p></li><li><p>more支持翻页，如果文件的内容过多，可以一页一页的显示</p></li></ul><p>语法：<code>more Linux路径</code></p><p>Linux系统内置有一个文件，路径为：&#x2F;etc&#x2F;services，可以使用more命令查看</p><p>more &#x2F;etc&#x2F;services</p><ul><li><p>在查看过程中通过空格来翻页</p></li><li><p>通过q退出</p></li></ul><h3 id="cp-mv-rm命令"><a href="#cp-mv-rm命令" class="headerlink" title="cp-mv-rm命令"></a>cp-mv-rm命令</h3><h4 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h4><p>用于复制文件文件夹，cp命令来自英文单词：copy</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>-r选项，可选，用于复制文件夹使用，表示递归</li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/cp-r.png"></p><ul><li><p>参数1，Linux路径，表示被复制的文件或文件夹</p></li><li><p>参数2，Linux路径，表示要复制去的地方</p></li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/cp.png"></p><h4 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h4><p>用于移动文件&#x2F;文件夹，来自英文：move</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li><p>参数1，Linux路径，表示被移动的文件或文件夹</p></li><li><p>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</p></li></ul><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/mv.png"></p><h4 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h4><p>用于删除文件&#x2F;文件夹，来自英文单词：remove</p><p>语法：<code>rm [-r -f] 参数1 参数2 ...... 参数n</code></p><ul><li><p>同cp命令一样，-r选项用于删除文件夹</p></li><li><p>-f表示force，强制删除（不会弹出提示确认信息）</p><ul><li><p>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</p></li><li><p>所以一般普通用户用不到-f选项</p><p>可以通过su - root，输入用户密码进入root用户，通过exit退回普通用户。</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/rm-f.png"></p></li></ul></li><li><p>参数1、参数2、······、参数n 表示要删除的文件&#x2F;文件夹路径，按照空格隔开</p></li></ul><p>rm命令支持通配符*，用来做模糊匹配</p><p>符号*表示通配符，即匹配任意内容（包含空），示例：</p><ul><li><p>test*，表示匹配任何以test开头的内容</p></li><li><p>*test，表示匹配任何以test结尾的内容</p></li><li><p>*test *，表示匹配任何包含test的内容</p></li></ul><p>演示：删除所有以test开头的文件&#x2F;文件夹</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/rm.png"></p><p>警告：rm是一个危险的命令，特别是在处于root用户的时候，要谨慎使用。</p><p>如下命令，请不要在root用户下执行：<code>rm -rf /</code>  <code>rm -rf /*</code>效果等同于在windows上执行c盘格式化。</p><h3 id="which-find命令"><a href="#which-find命令" class="headerlink" title="which-find命令"></a>which-find命令</h3><h4 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h4><p>我们在前面学习的Linux命令，其实他们的本质就是一个个的二进制可执行程序。</p><p>和Windows系统中的.exe文件是一个意思。</p><p>通过which命令，查看所使用的一系列命令的程序文件放在哪里</p><p>语法：<code>which 要查找的命令</code></p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/which.png"></p><h4 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h4><p>在Linux系统中，我们可以通过find命令去搜索指定的文件。</p><p>语法：<code>find 起始路径 -name &quot;被查找的文件名&quot;</code></p><p>为了确保后续演示，拥有最大的权限，可以切换到root用户，执行命令：<code>su - root</code></p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/find1.png"></p><p>被查找的文件名，支持使用通配符*来做模糊查询。</p><p>按文件大小查找文件</p><p>语法：<code>find 起始位置 -size +|-n[kMG]</code></p><ul><li><p>+、-表示大小和小于</p></li><li><p>n表示大小数字</p></li><li><p>kMG表示大小单位，k（小写字母）表示kb、M表示MB、G表示GB</p></li></ul><p>示例：</p><ul><li><p>查找小于10kB的文件：<code>find / -size -10k</code></p></li><li><p>查找大于100MB的文件：<code>find / -size +100M</code></p></li><li><p>查找大于1GB的文件：<code>find / -size +1G</code></p></li></ul><p>提示：用Ctrl + c可以停止搜索</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/find-size.png"></p><h3 id="grep-wc-管道符命令"><a href="#grep-wc-管道符命令" class="headerlink" title="grep-wc-管道符命令"></a>grep-wc-管道符命令</h3><h4 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h4><p>从文件中通过关键字过滤文件行</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li><p>选项-n，可选，表示在结果中显示匹配的行的行号</p></li><li><p>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用 “ ”将关键字包围起来</p></li><li><p>参数，文件路径，必填，表示要过滤内容的文件路径，<u>可作为内容输入端口</u></p></li></ul><h4 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h4><p>用来统计文件的行数、单词数量等</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li><p><em>-c</em>，统计bytes数量</p></li><li><p><em>-m</em>，统计字符数量</p></li><li><p><em>-l</em>，统计行数</p></li><li><p><em>-w</em>，统计单词数量</p></li><li><p>参数，文件路径，被统计的文件，<u>可以作为内容的输入端口</u></p></li></ul><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h4><p>管道符：|</p><p>含义：将管道符左边命令的结果，作为右边命令的输入</p><h3 id="echo-tail-重定向符命令"><a href="#echo-tail-重定向符命令" class="headerlink" title="echo-tail-重定向符命令"></a>echo-tail-重定向符命令</h3><h4 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h4><p>在命令行中输出指定的内容</p><p>语法：<code>echo &quot;输出的内容&quot;</code></p><ul><li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用” “包裹</li></ul><p>看如下命令：<code>echo pwd</code></p><p>本意是想，输出当前的工作路径，但是pwd被作为普通字符输出了</p><p>这个时候我们可以通过反引号将pwd包围，从而使pwd被作为命令执行，而非普通字符</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/echo.png"></p><h4 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h4><p>可以查看文件尾部的命令内容，跟踪文件的最新更改</p><p>语法：tail [-f -num] Linux路径</p><ul><li><p>参数，Linux路径，表示被跟踪的文件路径</p></li><li><p>选项，-f，表示持续跟踪     CTRL+c可以停止跟踪    按键盘的上键可以找到上次输入的命令</p></li><li><p>选项，-num，表示尾部多少行，不填默认10行，num是要填的数字</p></li></ul><h4 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h4><p>重定向符：&gt;和&gt;&gt;</p><ul><li><p>’&gt;‘，将左侧的命令的结果，<u><strong>覆盖</strong></u>写入到符号右侧的指定的文件中</p></li><li><p>‘&gt;&gt;’，将左侧命令的结果，<u><strong>追加</strong></u>写入到符号右侧指定的文件中</p></li></ul><p>具体可看以下内容</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/echo2.png"></p><h3 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h3><h4 id="vi-vim编辑器介绍"><a href="#vi-vim编辑器介绍" class="headerlink" title="vi\vim编辑器介绍"></a>vi\vim编辑器介绍</h4><p>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</p><p>同图形化界面中的文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择。</p><p><strong>vim是vi的加强版本，兼容vi的所有指令，不仅可以编辑文本，而且还具有shell程序编辑的功能，可以用不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</strong></p><h4 id="vi-vim编辑器的三种工作模式"><a href="#vi-vim编辑器的三种工作模式" class="headerlink" title="vi\vim编辑器的三种工作模式"></a>vi\vim编辑器的三种工作模式</h4><ul><li><p><strong>命令模式（command mode）</strong></p><p>命令模式下，所写的编辑器都理解为命令，以命令驱动执行不同的功能。</p><p>此模式下不能自由进行文本编辑。</p></li><li><p><strong>输入模式（insert mode）</strong></p><p>此模式下可以对文件进行自由编辑。</p></li><li><p><strong>底线命令模式（last line mode）</strong></p><p>以：开始，通常用于文件的保存、退出。</p></li></ul><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>如果需要通过vi&#x2F;vim编辑器编辑文件，可以通过以下命令：</p><p><code>vi 文件路径</code></p><p><code>vim 文件路径</code></p><ul><li><p>如果文件路径表示的文件不存在，那么此命令会用于编辑新文件</p></li><li><p>如果文件路径表示的文件存在，那么此命令用于编辑已有的文件</p></li></ul><h4 id="vi编辑器的快速体验"><a href="#vi编辑器的快速体验" class="headerlink" title="vi编辑器的快速体验"></a>vi编辑器的快速体验</h4><p>通过vi&#x2F;vim命令编辑文件，会打开一个新的窗口，此时这个窗口就是：命令模式窗口</p><p>命令模式是vi编辑器的入口和出口，如右图                       <img src="https://live2d-api-jet.vercel.app/model/image/Linux/vimWorkingMode.png" style="zoom: 25%;" /></p><ul><li><p>进入vi编辑器会进入命令模式</p></li><li><p>通过命令模式输入键盘指令，可以进入输入模式</p></li><li><p>输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式</p></li></ul><p>补充：CTRL+c也可以从输入模式退回到命令模式</p><h4 id="命令模式的快捷键"><a href="#命令模式的快捷键" class="headerlink" title="命令模式的快捷键"></a>命令模式的快捷键</h4><p>下面是命令模式中常见的快捷键</p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/CommandModeShortcuts.png" style="zoom:50%;" /><img src="https://live2d-api-jet.vercel.app/model/image/Linux/CommandModeShortcuts2.png" style="zoom: 67%;" /><img src="https://live2d-api-jet.vercel.app/model/image/Linux/CommandModeShortcuts3.png" style="zoom: 67%;" /></p><h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h4><p>通过Esc，退回到命令模式，再输入：，就可以进入到底线命令模式</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/BottomLineCommandMode.png" style="zoom:50%;" /><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="Linux的root用户"><a href="#Linux的root用户" class="headerlink" title="Linux的root用户"></a>Linux的root用户</h3><h4 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h4><p>无论是Windows、Mac OS、Linux均采用多用户的管理模式进行权限管理</p><p>而在Linux系统中，拥有最大权限的账户名为root（超级管理员）</p><p>root用户拥有最大的系统操作权限，而普通用户在许多地方是受限制的</p><p>例如：在根目录下创建文件夹只有root用户可以</p><p>由此可见普通用户的权限一般在home目录内是不受限制的</p><h4 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h4><p>su命令就是用于账户切换的系统命令，其来源于英文：Switch User</p><p>语法：<code>su [-] [用户名]</code></p><ul><li><p>-符号是可选的，表示是否在切换用户后加载环境变量（后面有），<strong>建议带上</strong></p></li><li><p>参数：用户名，表示要切换的用户，用户名可以省略，省略表示要切换到root</p></li><li><p>切换到用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：CTRL+d</p></li><li><p>使用普通用户，切换到其他用户需要输入密码，如切换到root用户</p></li><li><p>使用root用户切换到其它用户不需要密码，可以直接切换</p></li></ul><h4 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h4><p>不建议长期使用root用户，避免带来系统损坏。</p><p>为此我们以使用sudo命令，为普通的命令授权，临时以root身份执行。</p><p>语法：<code>sudo 命令</code></p><ul><li><p>在其它命令前，带上sudo，即可为这一条命令临时赋予root授权</p></li><li><p>但是并不是所有的用户，都有权利使用sudo，我们需要为<u>普通用户配置sudo认证</u></p></li></ul><h5 id="为普通用户配置sudo认证"><a href="#为普通用户配置sudo认证" class="headerlink" title="为普通用户配置sudo认证"></a>为普通用户配置sudo认证</h5><ul><li><p>切换到root用户，执行visudo命令，会自动通过vi编辑器打开：&#x2F;etc&#x2F;sudoers</p></li><li><p>在文件最后添加：</p><p><code>用户名 ALL=(ALL)    NOPASSWD:ALL</code></p><ul><li>其中最后的NOPASSWD:ALL表示使用sudo命令，无需输入密码</li></ul></li><li><p>最后通过wq保存</p></li><li><p>切换回普通用户</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/sudo.png" style="zoom: 80%;" /></li></ul><h3 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h3><h4 id="用户和用户组的概念"><a href="#用户和用户组的概念" class="headerlink" title="用户和用户组的概念"></a>用户和用户组的概念</h4><p>Linux系统中可以：</p><ul><li><p>配置多个用户</p></li><li><p>配置多个用户组</p></li><li><p>用户可以加入到多个用户组中</p></li></ul><p>Linux中关于权限的管控级别有两个级别，分别是：</p><ul><li><p>针对用户的权限控制</p></li><li><p>针对用户组的权限控制</p></li></ul><p>比如，针对某文件，可以控制用户的权限，也可以控制用户组的权限。</p><h4 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h4><p>以下命令需要root用户执行</p><ul><li>创建用户组</li></ul><p>        <code>groupadd 用户组名</code></p><ul><li>删除用户组</li></ul><p>        <code>groupdel 用户组名</code></p><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p>以下命令需要root用户执行</p><ul><li><p>创建用户</p><p><code>useradd [-g -d] 用户名</code></p><ul><li><p>-g指定用户的组，不指定-g，会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</p></li><li><p>-d指定用户HOME路径，不指定，HOME目录默认在：&#x2F;home&#x2F;用户名</p></li></ul></li><li><p>删除用户</p><p><code>userdel [-r] 用户名</code></p><ul><li>-r可以删除用户的HOME目录，不使用-r删除用户时，HOME目录保存</li></ul></li><li><p>查看用户所属组</p><p><code>id  [ 用户名]</code></p><ul><li>参数：用户名，被查看的用户，如果不提供则查看自身</li></ul></li><li><p>修改用户所属组</p><p><code>usermod -aG 用户组 用户名</code></p><p>将指定用户加入指定用户组</p></li></ul><h4 id="getent命令"><a href="#getent命令" class="headerlink" title="getent命令"></a>getent命令</h4><p>可以查看当前系统中有哪些用户</p><p>语法：<code>getent passwd</code></p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/getent.png" style="zoom: 80%;" /><img src="https://live2d-api-jet.vercel.app/model/image/Linux/getent1.png" style="zoom: 80%;" /><p>每个用户共有6个信息</p><p>用户名：密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</p><p>也可以查看当前系统中有哪些用户组</p><p>语法：<code>getent group</code></p><p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/getentgroup.png" style="zoom: 80%;" /><img src="https://live2d-api-jet.vercel.app/model/image/Linux/getentgroup2.png" style="zoom: 80%;" /></p><h3 id="查看权限控制信息"><a href="#查看权限控制信息" class="headerlink" title="查看权限控制信息"></a>查看权限控制信息</h3><h4 id="查看Linux文件的权限管控信息"><a href="#查看Linux文件的权限管控信息" class="headerlink" title="查看Linux文件的权限管控信息"></a>查看Linux文件的权限管控信息</h4><p>通过ls -l可以以列表的形式查看内容，并显示权限细节</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/PermissionDetails.png" style="zoom: 80%;" /><ul><li><p>序号1，表示文件、文件夹的权限控制信息</p></li><li><p>序号2，表示文件、文件夹所属用户</p></li><li><p>序号3，表示文件、文件夹所属用户组</p></li></ul><h4 id="认知权限信息"><a href="#认知权限信息" class="headerlink" title="认知权限信息"></a>认知权限信息</h4><p>解释序号1，权限细节</p><p>权限细节总共分为10个槽位</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/PermissionInformation.png" style="zoom: 50%;" /><p>举例：drwxr-xr-x，表示：</p><ul><li><p>首字母d表示这是一个文件夹</p></li><li><p>所属用户是权限是：有r有w有x，rwx</p></li><li><p>所属用户组的权限是：有r无w有x，r-x（-表示无此权限）</p></li><li><p>其它用户的权限是：有r无w有x，r-x</p></li></ul><h4 id="rwx"><a href="#rwx" class="headerlink" title="rwx"></a>rwx</h4><ul><li><p>r表示读权限</p></li><li><p>w表示写权限</p></li><li><p>x表示执行权限</p></li></ul><p>针对不同的文件和文件夹，rwx的含义有细微的区别</p><ul><li><p>r，针对文件可以查看文件内容</p><ul><li>针对文件夹可以查看文件夹的内容，如ls命令</li></ul></li><li><p>w，针对文件表示可以修改此文件</p><ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li><p>x，针对文件表示可以将文件作为程序执行</p><ul><li>针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</li></ul></li></ul><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><p>用于修改文件或文件夹的权限信息。</p><p>注意：只有文件、文件夹的所属用户或root用户可以修改</p><p>语法：<code>chmod [-R] 权限 文件/文件夹</code></p><ul><li>选项：-R，对文件夹内的全部内容应用同样的操作</li></ul><p>示例：</p><ul><li><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt，将文件权限修改为：rwxr-x–x</p><ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其它用户权限</li></ul></li><li><p>chmod -R u&#x3D;rwx,g&#x3D;rx,o&#x3D;x test，将文件夹test以及文件夹内全部内容权限设置为：rwxr-x–x</p></li></ul><p>除此之外，还有快捷写法：chmod 751 test.txt</p><p>将test.txt的权限修改为751</p><p>权限可以用3位数字来代表，3位数字从左到右分别表示用户、用户组、其他用户的权限。</p><p>数字的细节如下：r记作4、w记作2、x记作1，可以有：</p><ul><li><p>0：—</p></li><li><p>1：–x</p></li><li><p>2：-w-</p></li><li><p>3：-wx</p></li><li><p>4：r–</p></li><li><p>5：r-x</p></li><li><p>6：rw-</p></li><li><p>7：rwx</p></li></ul><p>所以751表示rwx r-x –x</p><h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><p>可以用于修改文件、文件夹的所属用户和用户组</p><p>注意：普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行</p><p>语法：<code>chown [-R] [ 用户][:][用户组] 文件或文件夹</code></p><ul><li><p>选项，-R，同chmod，对文件夹内全部内容应用相同规则</p></li><li><p>选项，用户，修改所属用户</p></li><li><p>选项，用户组，修改所属用户组</p></li><li><p>：用于分隔用户和用户组</p></li></ul><p>示例：</p><ul><li><p>chown root hello.txt，将hello.txt所属用户修改为root</p></li><li><p>chown :root hello.txt，将hello.txt所用户组修改为root</p></li><li><p>chown root:index hello.txt，将hello.txt所属用户修改为root，用户组修改为index</p></li><li><p>chown -R root test，将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</p></li></ul><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="小技巧快捷键"><a href="#小技巧快捷键" class="headerlink" title="小技巧快捷键"></a>小技巧快捷键</h3><h4 id="CTRL-c强制停止"><a href="#CTRL-c强制停止" class="headerlink" title="CTRL+c强制停止"></a>CTRL+c强制停止</h4><ul><li><p>Linux某些程序的运行，如果想要强制停止它，可以使用快捷键CTRL+c</p></li><li><p>命令输入错误，也可以通过它来退出当前输入，重新输入</p></li></ul><h4 id="CTRL-d退出或登出"><a href="#CTRL-d退出或登出" class="headerlink" title="CTRL+d退出或登出"></a>CTRL+d退出或登出</h4><ul><li><p>可以通过它退出账户</p></li><li><p>或者退出某些特定程序的专属页面</p></li></ul><p>注意：不能用于退出vi&#x2F;vim</p><h4 id="历史命令搜索"><a href="#历史命令搜索" class="headerlink" title="历史命令搜索"></a>历史命令搜索</h4><ul><li><p>可以通过history命令，查看历史输入过的命令</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/history.png" style="zoom: 67%;" /></li><li><p>可以通过：！命令前缀，自动执行上一次匹配前缀的命令</p></li><li><p>可以通过快捷键：CTRL+r，输入内容去匹配历史命令</p><p>如果搜索到你内容是你需要的，那么：</p><ul><li><p>按回车键可以直接执行</p></li><li><p>键盘左右键可以得到此命令（不执行）</p></li></ul></li></ul><h4 id="光标移动快捷键"><a href="#光标移动快捷键" class="headerlink" title="光标移动快捷键"></a>光标移动快捷键</h4><ul><li><p>ctrl+a，跳到命令开头</p></li><li><p>ctrl+e，跳到命令结尾</p></li><li><p>ctrl+键盘左键，向左跳一个单词</p></li><li><p>ctrl+键盘右键，向右跳一个单词</p></li></ul><h4 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h4><ul><li><p>通过ctrl+l，可以清空终端内容</p></li><li><p>或通过命令clear也可以</p></li></ul><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="Linux系统的应用商店"><a href="#Linux系统的应用商店" class="headerlink" title="Linux系统的应用商店"></a>Linux系统的应用商店</h4><p>操作系统安装软件有许多种形式，一般分为：</p><ul><li><p>下载安装包自行安装</p><ul><li><p>如win系统使用exe文件、msi文件等</p></li><li><p>如mac系统使用dmg文件、pkg文件等</p></li></ul></li><li><p>系统的应用商店内安装</p><ul><li><p>如win系统有Microsoft Store商店</p></li><li><p>如mac系统有AppStore商店</p></li></ul></li></ul><p>Linux系统同样支持这两种方式，首先学习使用：Linux命令行内的“应用商店”，yum命令安装软件</p><h4 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h4><p>yum：RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p><p>语法：<code>yum [-y] [install | remove | search] 软件名称</code></p><ul><li><p>选项：-y，自动确认，无需手动确认安装或卸载过程</p></li><li><p>install：安装</p></li><li><p>remove：卸载</p></li><li><p>search：搜索</p></li></ul><p>yum命令需要root权限，并且需要联网</p><p>示例：</p><ul><li><p>yum [-y] install wget,通过yum命令安装wget程序</p></li><li><p>yum [-y] remove wget，通过yum命令卸载wget</p></li><li><p>yum search wget，通过yum命令，搜索是否有wget安装包</p></li></ul><h4 id="apt命令-扩展"><a href="#apt命令-扩展" class="headerlink" title="apt命令-扩展"></a>apt命令-扩展</h4><p>前面学习的各类Linux命令，都是通用的。但是软件安装，Centos系统和Ubuntu系统是使用不同的包管理器。</p><p>centos使用yum管理器，ubuntu使用apt管理器</p><p>通过前面学习的WSL环境，我们可以得到ubuntu运行环境。</p><p>语法：<code>apt [-y] [install | remove |search] 软件名称</code></p><p>用法和yum一致，同样需要root权限</p><ul><li><p>apt install wget，安装wget</p></li><li><p>apt remove wget，卸载wget</p></li><li><p>apt search wget，搜索wget</p></li></ul><h3 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h3><p>Linux系统很多软件（内置的包括第三方）均支持使用systemctl命令控制：启动、停止、开机自启能被systemctl管理的软件，一般也称之为：服务</p><p>语法：<code>systemctl start | stop | status | enable | disable 服务名</code></p><ul><li><p>start 启动</p></li><li><p>stop 关闭</p></li><li><p>status 查看状态</p></li><li><p>enable 开启开机自启</p></li><li><p>disable 关闭开机自启</p></li></ul><p>系统内置的服务比较多，比如：</p><ul><li><p>NetworkManager，主网络服务</p></li><li><p>network，副网络服务</p></li><li><p>firewalld，防火墙服务</p></li><li><p>sshd，ssh服务</p></li></ul><p>除了内置的服务以外，部分第三方软件安装后也可以以systemctl进行控制。</p><ul><li>yum install -y ntp，安装ntp软件</li></ul><p>可以通过ntpd服务名，配合systemctl进行控制</p><ul><li>yum install -y httpd，安装apache服务器软件</li></ul><p>可以通过httpd服务名，配合systemctl进行控制</p><p>注意：部分软件安装后没有自动集成到systemctl中，我们可以手动添加。</p><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><h4 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h4><p>在系统中创建软链接，可以将文件、文件夹链接到其它位置。</p><p>类似Windows系统中的《快捷方式》</p><p>语法：<code>ln -s 参数1 参数 2</code></p><ul><li><p>-s选项，创建软链接</p></li><li><p>参数1：被链接的文件&#x2F;文件夹</p></li><li><p>参数2：要链接去的目的地</p></li></ul><p>实列：</p><ul><li><p>ln -s &#x2F;etc&#x2F;yum.conf ~&#x2F;yum.conf</p></li><li><p>ln -s &#x2F;etc&#x2F;yum ~&#x2F;yum</p></li></ul><h3 id="时间和时区"><a href="#时间和时区" class="headerlink" title="时间和时区"></a>时间和时区</h3><h4 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h4><p>通过date命令可以在命令行中查看系统时间</p><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d按照给定的字符串显示日期，一般用于日期计算</p><ul><li><p>其中支持的时间标记为：</p><ul><li><p>year</p></li><li><p>month</p></li><li><p>day</p></li><li><p>hour</p></li><li><p>minute</p></li><li><p>second</p></li></ul></li><li><p>-d选项也能和格式化字符串配合使用</p></li></ul></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li><p>%Y 年</p></li><li><p>%y 年份后两位数字</p></li><li><p>%m 月份 </p></li><li><p>%d 日</p></li><li><p>%H 小时</p></li><li><p>%M 分钟</p></li><li><p>%S 秒</p></li><li><p>%s 自 1970-01-01 00:00:00 UTC 到现在的秒数</p></li></ul></li></ul><p>示例：</p><ul><li><p>使用date命令本体，无选项，直接查看时间</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/date.png" style="zoom: 80%;" /></li></ul><p>我们也可以通过格式化字符串自定义显示格式</p><ul><li><p>按照2022-01-01的格式显示日期</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/date2.png" style="zoom: 80%;" /></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/date3.png" style="zoom: 80%;" /></li></ul><p>注意：由于命令中间带有空格，所以使用双引号包围格式化字符串，作为整体。</p><h4 id="修改Linux时区"><a href="#修改Linux时区" class="headerlink" title="修改Linux时区"></a>修改Linux时区</h4><p>一般通过date查看的日期时间是不准确的，这是因为：系统默认时区非中国的东八区</p><p>使用root权限，执行下面命令，修改时区为东八区时区</p><p><code>rm -f /etc/localtime</code></p><p><code>sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p><p>将系统的自带的localtime文件删除，并将&#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai文件链接为localtime文件即可</p><h4 id="ntp程序"><a href="#ntp程序" class="headerlink" title="ntp程序"></a>ntp程序</h4><p>也可以通过ntp程序自动校准系统时间 </p><p>安装ntp:<code>yum -y install ntp</code></p><p> 启动并设置开机自启：</p><ul><li><p><code>systemctl start ntpd</code></p></li><li><p>&#x2F;<code>systemctl enable ntpd</code></p></li></ul><p>当ntpd启动后会定期的帮助我们联网校准系统时间</p><ul><li>也可以手动校准（需root权限）：<code>ntpdate -u ntp.aliyun.com</code></li></ul><p>通过阿里云提供的服务网址配合ntpdate命令（安装ntp后会附带的命令）自动校准</p><h3 id="IP地址和主机名"><a href="#IP地址和主机名" class="headerlink" title="IP地址和主机名"></a>IP地址和主机名</h3><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p>每一台联网的电脑都会有一个地址，用于和其它计算机进行通迅</p><p>IP地址主要有2个版本，V4版本和V6版本</p><p>IPv4版本的地址格式是: a.b.c.d，其中abcd表示0~225的数字，如192.168.88.101就是一个标准的IP地址</p><p>可以通过命令：<code>ifconfig</code>，查看本机的ip地址，如果无法使用ifconfig命令，可以安装：<code>yum -y install net-tools</code></p><h4 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h4><p>除了标准的IP地址以外，还有几个特殊的IP地址需要我们了解：</p><ul><li><p>127.0.0.1 这个IP地址用于指代本机</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/IP.png" style="zoom: 67%;" /></li><li><p>0.0.0.0，特殊IP地址</p><ul><li><p>可以用于指代本机</p></li><li><p>可以在端口绑定中用来确定绑定关系</p></li><li><p>在一些IP地址限制中，可以表示所有IP的意思，如放行规则设置为0.0.0.0，表示允许任意IP访问</p></li></ul></li></ul><h4 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h4><p>每台电脑除了IP地址外，也可以有一个名字，称为主机名，无论是Windows或Linux系统，都可以给系统设置主机名</p><ul><li><p>Linux可以通过命令：<code>hostname</code>查看主机名</p></li><li><p>还可以使用：hostnamectl set-hostname 主机名，修改主机名（root权限）</p></li></ul><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>ip地址难以记忆，有没有什么办法可以通过主机名或替代的字符地址去代替数字化的ip地址</p><p>实际上，我们一直都是通过字符化的地址去访问服务器，很少指定ip地址</p><p>比如，我们在浏览器内输入：<a href="http://www.baidu.com/">www.baidu.com</a> ，会打开百度的网址</p><p>这其中的<a href="http://www.baidu.com，是百度的网址，我们称之为：域名">www.baidu.com，是百度的网址，我们称之为：域名</a></p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/DomainNameResolution.png" style="zoom: 67%;" /><p>即：</p><ul><li><p>先查看本机是否有记录（私人地址本）</p><ul><li><p>windows看：C:\WIndows\System32\drivers\etc\hosts</p></li><li><p>Linux看：&#x2F;etc&#x2F;hosts</p></li></ul></li><li><p>再联网去DNS服务器询问是否有记录（如114.114.114.114，8.8.8.8等）</p></li></ul><h4 id="配置主机名映射"><a href="#配置主机名映射" class="headerlink" title="配置主机名映射"></a>配置主机名映射</h4><p>比如，我们finalshell是通过ip地址连接到LInux服务器，那有没有可能通过域名（主机名）连接呢？</p><p>实际上是可以的，我们只需要在windows系统的：C:\WIndows\System32\drivers\etc\hosts文件中配置记录即可</p><h3 id="配置Linux固定的IP"><a href="#配置Linux固定的IP" class="headerlink" title="配置Linux固定的IP"></a>配置Linux固定的IP</h3><h4 id="为什么需要固定的IP"><a href="#为什么需要固定的IP" class="headerlink" title="为什么需要固定的IP"></a>为什么需要固定的IP</h4><p>当前我们虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的。</p><p>DHcp：动态获取IP地址，即每次重启设备后都会获取一次，可能导致IP地址频繁变更</p><p>原因1：办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常变换我们修改配置很麻烦</p><p>原因2：在配置虚拟机ip和主机名的映射中，如果ip频繁更改，我们也需要频繁更新映射关系</p><h4 id="在VMware-Workstation中配置固定IP"><a href="#在VMware-Workstation中配置固定IP" class="headerlink" title="在VMware Workstation中配置固定IP"></a>在VMware Workstation中配置固定IP</h4><p>两大步骤：</p><ul><li><p>在VMware Workstation中配置ip地址网关和网段</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/ip1.png" style="zoom: 67%;" /><img src="https://live2d-api-jet.vercel.app/model/image/Linux/ip2.png" style="zoom: 67%;" /></li><li><p>在Linux系统中手动修改配置文件，固定IP</p><p>在Linux系统中修改固定ip</p><p>使用vim编辑<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>文件，填入以下内容：</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/ip3.png" style="zoom: 67%;" /><p>执行：systemctl restart network重启网卡，执行ifconfig即可看到ip固定为192.168.88.88</p></li></ul><h3 id="网络请求和下载"><a href="#网络请求和下载" class="headerlink" title="网络请求和下载"></a>网络请求和下载</h3><h4 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h4><p>检查指定的网络服务是否是可联通状态</p><p>语法：<code>ping [-c num] ip或主机名</code></p><ul><li><p>选项：-c，检查的次数，不使用-c选项，将无限次数持续检查</p></li><li><p>参数：ip或主机名，被检查的服务器的ip地址或主机名地址</p></li></ul><p>示例：</p><ul><li><p>检查baidu.com是否联通</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/pingbaidu.png" style="zoom: 67%;" /></li></ul><p>结果显示联通，延迟51ms左右</p><h4 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h4><p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：<code>wget [-b] url</code></p><ul><li><p>选项：-b，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</p></li><li><p>参数：url，下载链接</p></li></ul><p>示例：</p><ul><li><p>下载apache-hadoop 3.3.0版本：<code>wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></p></li><li><p>在后台下载：<code>wget -b http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></p></li><li><p>通过tail命令可以监控后台下载进度：<code>tail -f wget-log</code></p></li></ul><p>注意：无论下载是否完成，都会生成要下载的文件，如果下载未完成，要把吓到一半的文件删除，重新下。</p><h4 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h4><p>curl可以发送网络请求，用于：下载文件、获取信息等</p><p>语法：<code>curl [-O] url</code></p><ul><li><p>选项：-O，用于下载文件，当url是下载链接时，可以使用此选项保存文件</p></li><li><p>参数：url，要发起请求的网络地址</p></li></ul><p>示例：</p><ul><li><p>向cip.cc发起网络请求:<code>curl cip.cc</code></p></li><li><p>向python.itheima.com发起网络请求：<code>curl python.itheima.com</code></p></li><li><p>通过curl下载hadoop-3.3.0安装包：<code>curl -O http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></p></li></ul><p>这个等同于我们在浏览器里面打开网址</p><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口是设备与外界通讯交流的出入口。端口可以分为：物理端口和虚拟端口两类</p><ul><li><p>物理端口：可以称之为接口，是可见的端口，如USB接口、RJ45网口、HDMI端口等</p></li><li><p>虚拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的</p></li></ul><h4 id="端口（虚拟）"><a href="#端口（虚拟）" class="headerlink" title="端口（虚拟）"></a>端口（虚拟）</h4><p>物理端口我们可以经常见到，也知道它的作用。</p><p>而虚拟端口则需要而外了解：</p><p>计算机程序之间得到通通讯，通过IP地址只能锁定计算机，但是无法锁定具体的程序。</p><p>而通过虚拟端口就可以锁定计算机上具体的程序，确保程序之间进行沟通</p><p>IP地址相当于小区地址，在小区内有许多住户（程序），而门牌号就是（端口）就是各个住户（程序）的联系地址</p><p>Linux系统就是一个超大号的小区，可以支持65535个端口，这6万多个端口可以分为3类：</p><ul><li><p>公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口非特殊需要，不要占用这个范围的端口</p></li><li><p>注册端口：1024~49151，通常看可以随意使用，用于松散的绑定一些程序&#x2F;服务</p></li><li><p>动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络连接时，用于临时使用。</p></li></ul><h4 id="查看端口占用nmap-netstat"><a href="#查看端口占用nmap-netstat" class="headerlink" title="查看端口占用nmap-netstat"></a>查看端口占用nmap-netstat</h4><p>可以使用nmap命令，安装nmap：<code>yum -y install nmap</code></p><p>语法：<code>nmap 被查看的IP地址</code></p><p>我们还可以通过netstat命令，查看指定端口的占用情况，安装netstat：<code>yum -y install net-tools</code></p><p>语法：<code>netstat -anp |grep 端口号 </code></p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/netstat1.png" style="zoom: 67%;" /><p>从图中可以看到当前系统6000端口被程序（进程号10529）占用</p><p>其中，0.0.0.0：6000，表示端口绑定在0.0.0.0在这个IP地址上，表示允许外部访问</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>程序运行在操作系统中，是被操作系统所管理的</p><p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</p><p>并会每一个进程分配一个独有的：进程 ID（进程号）</p><p>可以通过ps命令查看Linux系统中的进程信息</p><p>语法：<code>ps [-e -f]</code></p><ul><li><p>选项：-e，显示出全部的进程</p></li><li><p>选项：-f，以完全格式化的形式展示信息（展示全部信息）</p></li></ul><p>一般来说，固定用法就是：ps -ef列出全部进程的全部信息</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/ps.png" style="zoom: 67%;" /><p>从左到右分别是：</p><ul><li><p>UID：进程所属的用户ID</p></li><li><p>PID：进程的进程号ID</p></li><li><p>PPID：进程的父ID（启动此进程的其它进程）</p></li><li><p>C：此进程的CPU占用率（百分比）</p></li><li><p>STIME：进程的启动时间</p></li><li><p>TTY：启动此进程的终端序号，如显示？，表示非终端启动</p></li><li><p>TIME：进程占用CPU的时间</p></li><li><p>CND：进程对应的名称或启动路径或启动命令</p></li></ul><p>在xshell中，执行命令：tail，可以看到，此命令一直阻塞在那里</p><p>通过ps -ef | grep tail，可以准确的找到tail命令的信息</p><p>过滤不仅仅过滤进程号，用户ID等等，都可以被grep过滤</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/pstail.png" style="zoom: 67%;" /><h4 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h4><p>在windows系统中，可以通过任务管理器选择进程后，点击结束进程从而关闭它。</p><p>同样，在Linux系统中，可以通过kill命令关闭进程</p><p>语法：kill [-9] 进程ID</p><ul><li>选项：-9，表示强制关闭进程。不使用 此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。</li></ul><h3 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h3><h4 id="查看系统资源占用"><a href="#查看系统资源占用" class="headerlink" title="查看系统资源占用"></a>查看系统资源占用</h4><p>可以通过<code>top</code>命令查看CPU、内存使用情况，类似windows是任务管理器</p><p>默认每5秒进行一次刷新，按ctrl+c或q可以退出</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/top.png" style="zoom: 67%;" /><ul><li><p>第一行：</p><p>top：命令名称；当前系统时间；启动了多久；几个用户登录；load：1、5、15分钟负载</p></li><li><p>第二行：</p><p>Tasks：进程的数量；几个进程在运行；几个进程睡眠；几个进程停止；几个僵尸进程</p></li><li><p>第三行：</p><p>%Cpu（s）：CPU使用率，us：用户CPU使用率，sy：系统CPU使用率，ni：高级先进进程占用CPU时间百分比，id：空闲CPU率，wa：IO等待CPU占用率，hi：CPU硬件终端率，si：CPU软件中断率，st：强制等待占用CPU率</p></li><li><p>第四、五行：</p><p>Kib Mem：物理内存，total：总量，free：空闲，used：使用，buff&#x2F;cache：buff和cache占用</p><p>KibSwap：虚拟内存（交换空间），total：总量，free：空闲，used：使用，buff&#x2F;cache：buff和cache占用</p></li></ul><img src="https://live2d-api-jet.vercel.app/model/image/Linux/top2.png" style="zoom: 67%;" /><ul><li><p>PID：进程id</p></li><li><p>USER：进程所属用户</p></li><li><p>PR：进程优化级，越小越高</p></li><li><p>NI：负值表示高优先级，正表示低优先级</p></li><li><p>VIRT：进程使用虚拟内存，单位KB</p></li><li><p>RES：进程使用物理内存，单位KB</p></li><li><p>SHR：进程使用共享内存，单位KB</p></li><li><p>S：进程状态（S休眠、R运行、Z僵死状态、N负数优先级、I空闲状态）</p></li><li><p>%CPU：进程占用CPU率</p></li><li><p>%MEM：进程占用内存条</p></li><li><p>TIME+：进程使用CPU时间总计，单位10毫秒</p></li><li><p>COMMAND：进程的命令或名称或程序文件路径</p></li></ul><h4 id="top命令选项"><a href="#top命令选项" class="headerlink" title="top命令选项"></a>top命令选项</h4><ul><li><p>-p 只显示某个进程的信息</p></li><li><p>-d 设置刷新时间，默认是5s</p></li><li><p>-c 显示生产进程得到完整命令，默认是进程名</p></li><li><p>-n 指定刷新次数，比如 top -n 3，刷新输出3次后退出</p></li><li><p>-b 以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，比如 top -b -n 3 &gt; &#x2F;tmp&#x2F;top.tmp</p></li><li><p>-i 不显示任何闲置（idle）或无用（zombie）的进程</p></li><li><p>-u 查找特定用户启动的进程</p></li></ul><h4 id="top交换式选项"><a href="#top交换式选项" class="headerlink" title="top交换式选项"></a>top交换式选项</h4><p>当top以交互式运行（非-b选项启动），可以用于以下交互式命令进行控制</p><ul><li><p>h键 显示帮助画面</p></li><li><p>c键 显示产生进程的完整命令，等同于-c参数，再次按下c键，变为默认显示</p></li><li><p>f键 可以选择需要展示得到项目</p></li><li><p>M键 根据驻留内存大小（RES）排序</p></li><li><p>P键 根据CPU使用百分比大小进行排序</p></li><li><p>T键 根据时间&#x2F;累计时间进行排序</p></li><li><p>E键 切换顶部内存显示单位</p></li><li><p>e键 切换进程内存显示单位</p></li><li><p>l键 切换显示平均负载和启动时间信息</p></li><li><p>i键 不显示闲置或无用的进程，等同于-i参数，再次按下，变为默认显示</p></li><li><p>t键 切换显示CPU状态信息</p></li><li><p>m键 切换显示内存信息</p></li></ul><h4 id="磁盘的信息监控"><a href="#磁盘的信息监控" class="headerlink" title="磁盘的信息监控"></a>磁盘的信息监控</h4><h5 id="df命令-查看磁盘使用情况"><a href="#df命令-查看磁盘使用情况" class="headerlink" title="df命令-查看磁盘使用情况"></a>df命令-查看磁盘使用情况</h5><p>语法：<code>df [-h]</code></p><ul><li>选项：-h，以更加人性化的显示</li></ul><h5 id="iostat命令-查看CPU、磁盘的相关信息"><a href="#iostat命令-查看CPU、磁盘的相关信息" class="headerlink" title="iostat命令-查看CPU、磁盘的相关信息"></a>iostat命令-查看CPU、磁盘的相关信息</h5><p>语法：<code>iostat [-x] [num1] [num2]</code></p><ul><li><p>选项：-x，显示更多信息</p></li><li><p>num1：数字，刷新间隔，num2：数字，刷新次数</p></li></ul><img src="https://live2d-api-jet.vercel.app/model/image/Linux/iostat.png" style="zoom: 67%;" /><p>tps：该设备每秒的传输次数（indicate the number of transfers per second that were issued to the device.）。“一次传输”意思是“一次I&#x2F;O请求”。多个逻辑请求可能会被合并为“一次I&#x2F;O请求”，“一次传输”请求的大小是未知的。</p><p>使用iostat -x可以显示更多信息</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/iostat-x.png" style="zoom: 67%;" /><ul><li><p>rrqm&#x2F;s：每秒这个设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge，提高IO利用率，避免重复调用）</p></li><li><p>wrqm&#x2F;s：每秒这个设备相关的写入请求有多少被Merge了</p></li><li><p>rsec&#x2F;s： 每秒读取的扇区数：sectors</p></li><li><p>wsec&#x2F;：每秒写入的扇区数</p></li><li><p><mark>rKB&#x2F;s：每秒发送到设备的读取请求数</mark></p></li><li><p><mark>wKB&#x2F;s：每秒发送到设备的写入请求数</mark></p></li><li><p>avgrp-sz：平均请求扇区的大小</p></li><li><p>avgqu-sz：平均请求队列的长度，队列越短越好</p></li><li><p>await：每一个IO请求的处理的平均时间（单位是微秒毫秒）</p></li><li><p>svctm：表示平均每次设备I&#x2F;O操作的服务时间（以毫秒为单位）</p></li><li><p><mark>%util：磁盘利用率</mark></p></li></ul><h4 id="网络状态监控"><a href="#网络状态监控" class="headerlink" title="网络状态监控"></a>网络状态监控</h4><h5 id="sar命令-查看网络的相关统计"><a href="#sar命令-查看网络的相关统计" class="headerlink" title="sar命令-查看网络的相关统计"></a>sar命令-查看网络的相关统计</h5><p>语法：<code>sar -n DEV num1 num2</code></p><ul><li><p>选项：-n，查看网络，DEV表示查看网络接口</p></li><li><p>num1：刷新间隔（不填就查看一次结束）， num2：查看次数（不填无限次数）</p></li></ul><img src="https://live2d-api-jet.vercel.app/model/image/Linux/sar.png" style="zoom: 67%;" /><ul><li><p>IFACE 本地网卡接口名称</p></li><li><p>rxpck&#x2F;s 每秒钟接受的数据包</p></li><li><p>txpck&#x2F;s 每秒钟发送的数据包</p></li><li><p><mark>rxKB&#x2F;S 每秒钟接受的数据包大小，单位为KB</mark></p></li><li><p><mark>txKB&#x2F;S 每秒钟发送的数据包大小。单位为KB</mark></p></li><li><p>rxcmp&#x2F;s 每秒钟接受的压缩数据包</p></li><li><p>txcmp&#x2F;s 每秒钟发送的压缩包</p></li><li><p>rxmcst&#x2F;s 每秒钟接受的 多播数据包</p></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>在理解which命令的时候，我们知道使用的一系列命令其实本质上是一个个的可以执行的程序，比如cd命令本体就是：&#x2F;usr&#x2F;bin&#x2F;cd 这个程序文件</p><p>我们是否有疑问，无论当前目录在哪里，都能够执行：&#x2F;usr&#x2F;bin&#x2F;cd这个程序吗？</p><p>环境变量是操作系统在运行的时候，记录的一些关键性信息，用以辅助系统运行。</p><p>在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</p><p>环境变量是一种KeyValue型结构，即名称和值，</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/env.png" style="zoom: 67%;" /><p>在前面提出的问题中，我们说无论当前工作目录是什么，都能执行&#x2F;usr&#x2F;bin&#x2F;cd这个程序，这个就是借助环境变量中：PATH这个项目的值来做到的。</p><img src="https://live2d-api-jet.vercel.app/model/image/Linux/PATH.png" style="zoom: 67%;" /><p>PATH记录了系统执行任何命令的搜索路径，如上图记录了（路径之间以：隔开）</p><ul><li><p>&#x2F;usr&#x2F;local&#x2F;bin</p></li><li><p>&#x2F;usr&#x2F;bin</p></li><li><p>&#x2F;usr&#x2F;local&#x2F;sbin</p></li><li><p>&#x2F;usr&#x2F;sbin</p></li><li><p>&#x2F;home&#x2F;index&#x2F;.local&#x2F;bin</p></li><li><p>&#x2F;home&#x2F;index&#x2F;bin</p></li></ul><p>当执行任何命令，都会按照顺序，从上述路径中搜索要执行的程序的本体</p><p>比如执行cd命令，就从第二个目录&#x2F;usr&#x2F;bin中搜索到了cd命令，并执行</p><h4 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h4><p>在Linux系统中，$符号被用于取“变量”的值</p><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用。</p><p>取得环境变量的值就可以通过语法：$环境变量名 来取得</p><p>比如：<code>echo $PATH</code></p><p>就可以取得PATH这个环境变量的值，并通过echo语气输出出来。</p><p>又或者：<code>echo ${PATH}ABC</code></p><p>当和其中其它内容混合在一起的时候，可以通过{}来标注取的变量是谁</p><h4 id="自行设置环境变量"><a href="#自行设置环境变量" class="headerlink" title="自行设置环境变量"></a>自行设置环境变量</h4><p>Linux环境变量可以用户自行设置，其中分为：</p><ul><li><p>临时设置：语法：<code>export 变量名=变量值</code></p></li><li><p>永久生效</p><ul><li><p>针对当前用户生效，配置在当前用户的：<code>~/.bashrc</code>文件中可以用vi或vim进行编辑</p></li><li><p>针对所有用户生效，配置在系统的：<code>/etc/profile</code>文件中</p></li><li><p>并通过语法：source 配置文件，进行立刻生效，或重新登录XShell或FinalShell</p></li></ul></li></ul><h4 id="自定义环境变量PATH"><a href="#自定义环境变量PATH" class="headerlink" title="自定义环境变量PATH"></a>自定义环境变量PATH</h4><p>环境变量PATH这个项目里面记录了执行命令的搜索路径</p><p>这些搜索路径我们也可以自行添加到PATH中去</p><p>测试：</p><ul><li><p>在当前HOME目录内创建文件夹，myenv，在文件夹内创建文件mkhaha</p></li><li><p>通过vim编辑器，在mkhaha文件内填入：echo 哈哈哈哈哈</p></li></ul><p>完成上述操作后，随意切换工作目录，执行mkhaha目录尝试一下，会发现无法执行</p><ul><li><p>修改PATH的值</p></li><li><p>临时修改PATH：<code>export PATH=$PATH:/home/index/myenv</code>，再执行mkhaha，无论在哪里都能执行了，</p></li><li><p>或将<code>export PATH=$PATH:/home/index/myenv</code> ,填入环境变量文件或系统环境变量文件中</p></li></ul><h3 id="Linux文件的上传和下载"><a href="#Linux文件的上传和下载" class="headerlink" title="Linux文件的上传和下载"></a>Linux文件的上传和下载</h3><p>如果使用xshell的话我们可以通过使用xftp工具，来和虚拟机进行数据交换</p><p>rz、sz命令也能进行文件的传输</p><p>可以先通过<code>yum -y install lrzsz</code>命令进行安装。</p><ul><li><p>rz命令，进行上传，语法：直接输入rz即可</p></li><li><p>sz命令进行下载，语法：sz要下载的文件</p></li></ul><h3 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h3><h4 id="压缩格式"><a href="#压缩格式" class="headerlink" title="压缩格式"></a>压缩格式</h4><p>市面上有非常多的压缩格式</p><ul><li><p>zip格式：linux，windows，macos</p></li><li><p>7zip：windows系统常用</p></li><li><p>rar：windows系统常用</p></li><li><p>tar：Linux，macos常用</p></li><li><p>gzip：Linux，macos常用</p></li></ul><h4 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h4><p>Linux和Mac系统常用有2种压缩格式，后缀名分别为：</p><ul><li><p>.tar，称之为tarball，归档文件，即简单的将文件组装到一个 .tar的文件内，并没有太多的文件体积的减少，仅仅是简单的封装</p></li><li><p>.gz，也常见为,tar.gz 或.gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</p></li></ul><p>针对这两种格式，使用tar命令均可以进行压缩和解压的操作</p><p>语法：<code>tar [-c -v -x -f -z -C] 参数1 参数2 ....参数n</code></p><ul><li><p>-c，创建压缩文件，用于压缩格式</p></li><li><p>-v，显示压缩，解压过程，用于查看进度</p></li><li><p>-x，解压模式</p></li><li><p>-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</p></li><li><p>-z，gzip模式，不使用-z就是普通的tarball格式</p></li><li><p>-C，选择解压的目的地，用于解压模式</p></li></ul><p>tar的常用的压缩组合为：</p><ul><li><p>tar -cvf test.tar 1.txt 2.txt 3.txt</p><p>将1.txt 2.txt 3.txt压缩到test.tar文件内</p></li><li><p>tar -zcvf</p><p>将1.txt 2.txt 3.txt压缩到test.tar.gz文件内，使用gzip模式</p></li></ul><p>注意：</p><ul><li><p>-z选项如果使用的话，一般处于选项的第一个位置</p></li><li><p>-f选项，必须在选项位的最后一个</p></li></ul><p>常用的解压组合：</p><ul><li><p><code>tar -xvf test.tar</code></p><p>解压test.tar，将文件解压到当前目录</p></li><li><p><code>tar -xvf test.tar -C /home/index</code></p><p>解压test.tar，将文件解压到指定的目录里面</p></li><li><p><code>tar -zxvf test.tar.gz -C /home/index</code></p><p>以gzip模式解压test.tar.gz，将文件解压至指定目录</p></li></ul><p>注意：</p><ul><li><p>-f选项，必须在选项组合体的最后一位</p></li><li><p>-z选项，建议在开头位置</p></li><li><p>-C选项单独使用，和解压所需的其它参数分开</p></li></ul><h4 id="zip命令压缩文件"><a href="#zip命令压缩文件" class="headerlink" title="zip命令压缩文件"></a>zip命令压缩文件</h4><p>可以使用zip命令，压缩文件为zip压缩包</p><p>语法：<code>zip [-r] 参数1 参数2 参数3</code></p><ul><li>-r，被压缩的包含文件夹的时候，想要使用-r选项，和rm、cp等命令的-r效果一致</li></ul><p>示例：</p><ul><li><p><code>zip tess.zip a.txt b.txt c.txt</code></p><p>将a.txt b.txt c.txt压缩到test.zip 文件内</p></li><li><p><code>zip -r test.zip test index a.txt</code></p><p>将test、index两个文件夹和a.txt 文件，压缩到test.zip文件内</p></li></ul><h4 id="nuzip命令解压文件"><a href="#nuzip命令解压文件" class="headerlink" title="nuzip命令解压文件"></a>nuzip命令解压文件</h4><p>语法：unzip [-d] 参数</p><ul><li><p>-d，指定要解压去的位置，同tar的-C选项</p></li><li><p>参数，被解压的zip压缩包文件</p></li></ul><p>示例:</p><ul><li><p>unzip test.zip，将test.zip解压到当前目录</p></li><li><p>unzip test.zip -d &#x2F;home&#x2F;index</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>51</title>
    <link href="/2025/10/26/51/"/>
    <url>/2025/10/26/51/</url>
    
    <content type="html"><![CDATA[<h2 id="GPIO模式"><a href="#GPIO模式" class="headerlink" title="GPIO模式"></a><strong>GPIO模式</strong></h2><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在此模式下，引脚用于读取外部信号的电平（高或低）。</p><ol><li><strong>浮空输入</strong><ul><li><strong>描述</strong>：引脚内部既不上拉到高电平，也不下拉到低电平，完全由外部电路决定其电平状态。当外部没有连接或处于高阻态时，引脚电平是悬空、不确定的。</li><li><strong>应用场景</strong>：用于连接外部有明确驱动能力的电路，如按键（需外接上拉或下拉电阻）、与其他IC通信且该IC有推挽输出等。<strong>不推荐用于悬空引脚</strong>，因为容易受噪声干扰。</li></ul></li><li><strong>上拉输入</strong><ul><li><strong>描述</strong>：引脚内部通过一个电阻连接到VCC（高电平）。当外部没有信号驱动时，引脚会被拉至高电平。</li><li><strong>应用场景</strong>：按键检测（按键另一端接地，按下时为低电平，松开时因上拉电阻变为高电平），用于确保默认状态为高。</li></ul></li><li><strong>下拉输入</strong><ul><li><strong>描述</strong>：引脚内部通过一个电阻连接到GND（低电平）。当外部没有信号驱动时，引脚会被拉至低电平。</li><li><strong>应用场景</strong>：按键检测（按键另一端接VCC，按下时为高电平，松开时因下拉电阻变为低电平），用于确保默认状态为低。</li></ul></li></ol><hr><h3 id="输出模式"><a href="#输出模式" class="headerlink" title="输出模式"></a>输出模式</h3><p>在此模式下，引脚用于驱动外部电路，输出高电平或低电平。</p><ol><li><strong>推挽输出</strong><ul><li><strong>描述</strong>：这是最常用的输出模式。它使用一对MOSFET（一个P-MOS，一个N-MOS），像“推”和“挽”一样工作。<ul><li>输出高电平时，P-MOS导通，直接连接到VCC，<strong>可以主动“推”出电流</strong>（源电流）。</li><li>输出低电平时，N-MOS导通，直接连接到GND，<strong>可以主动“拉入”电流</strong>（吸电流）。</li></ul></li><li><strong>特点</strong>：驱动能力强，高低电平都很稳定，不会出现高阻态。可以直接驱动LED、继电器等。</li><li><strong>应用场景</strong>：驱动大多数数字器件，如LED、蜂鸣器、通信总线（如SPI、I2C的主机SCK&#x2F;MOSI引脚）。</li></ul></li><li><strong>开漏输出</strong><ul><li><strong>描述</strong>：只有下拉的N-MOS，没有上拉的P-MOS。<ul><li>输出低电平时，N-MOS导通，将引脚拉至GND。</li><li>输出高电平时，N-MOS关闭，引脚处于<strong>高阻态</strong>（既不是高也不是低）。<strong>要得到高电平，必须外接一个上拉电阻到VCC</strong>。</li></ul></li><li><strong>特点</strong>：<ul><li><strong>电平转换</strong>：方便实现不同电压域的设备通信。例如，3.3V的单片机可以通过开漏输出和上拉电阻到5V，与5V设备通信，而不会损坏单片机。</li><li><strong>线与功能</strong>：多个开漏输出的引脚可以直接连接在一起，实现“线与”逻辑。只要有一个输出低，总线就是低；所有都输出高，总线才是高。</li></ul></li><li><strong>应用场景</strong>：<ul><li><strong>I2C通信总线</strong>（SDA, SCL）必须使用开漏模式，以实现多主机的“线与”仲裁。</li><li>需要电平转换的场合。</li><li>驱动高于单片机电压的器件（如通过外接上拉电阻到12V）。</li></ul></li></ul></li></ol><p>在输出模式下，通常还可以配置<strong>输出速度</strong>（低速、中速、高速、超高速），这决定了引脚电平切换的上升&#x2F;下降时间，影响EMI（电磁干扰）和功耗。</p><hr><h3 id="模拟模式"><a href="#模拟模式" class="headerlink" title="模拟模式"></a>模拟模式</h3><ol><li><strong>模拟输入&#x2F;输出</strong><ul><li><strong>描述</strong>：引脚完全与内部的数字电路断开连接，既不经过施密特触发器，也无法进行数字读写。引脚直接连接到片上的模拟外设。</li><li><strong>应用场景</strong>：<ul><li>作为<strong>ADC（模数转换器）</strong> 的输入，用于读取模拟传感器电压（如电位器、光敏电阻）。</li><li>作为<strong>DAC（数模转换器）</strong> 的输出，用于产生模拟电压。</li></ul></li><li><strong>重要提示</strong>：当引脚用作ADC或DAC时，<strong>必须</strong>配置为模拟模式，否则无法正确读取或产生模拟信号。</li></ul></li></ol><hr><h3 id="复用功能模式"><a href="#复用功能模式" class="headerlink" title="复用功能模式"></a>复用功能模式</h3><p>当引脚被用于单片机内部集成的特定外设时（如UART、SPI、I2C、TIM等），需要配置为此模式。</p><ol><li><strong>复用推挽输出</strong><ul><li><strong>描述</strong>：引脚作为片上外设（如SPI的SCK、MOSI）的输出端，其输出结构是推挽的。输出信号由外设硬件自动控制，而非程序直接写GPIO寄存器。</li><li><strong>应用场景</strong>：需要强驱动能力的通信外设输出，如SPI、SDIO、USART的TX引脚等。</li></ul></li><li><strong>复用开漏输出</strong><ul><li><strong>描述</strong>：引脚作为片上外设的输出端，但其输出结构是开漏的。</li><li><strong>应用场景</strong>：需要开漏特性的外设，如<strong>I2C</strong>的SDA和SCL引脚、USART的双向引脚等。</li></ul></li></ol><p><strong>注意</strong>：“复用功能”本身不区分输入输出，具体是输入还是输出由所连接的外设决定。例如，配置为USART_TX是复用输出，而配置为USART_RX则是复用输入。</p><hr><h3 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h3><table><thead><tr><th align="left">模式</th><th align="left">方向</th><th align="left">电平特性</th><th align="left">关键特点</th><th align="left">典型应用</th></tr></thead><tbody><tr><td align="left"><strong>浮空输入</strong></td><td align="left">输入</td><td align="left">高阻态</td><td align="left">电平不确定，易受干扰</td><td align="left">外部有强驱动的数字信号</td></tr><tr><td align="left"><strong>上拉输入</strong></td><td align="left">输入</td><td align="left">默认高电平</td><td align="left">内部上拉电阻</td><td align="left">按键（按键接地）</td></tr><tr><td align="left"><strong>下拉输入</strong></td><td align="left">输入</td><td align="left">默认低电平</td><td align="left">内部下拉电阻</td><td align="left">按键（按键接VCC）</td></tr><tr><td align="left"><strong>推挽输出</strong></td><td align="left">输出</td><td align="left">强高低电平</td><td align="left">驱动能力强，最常用</td><td align="left">驱动LED、数字器件、SPI等</td></tr><tr><td align="left"><strong>开漏输出</strong></td><td align="left">输出</td><td align="left">低&#x2F;高阻态</td><td align="left">需外接上拉，支持电平转换和“线与”</td><td align="left">I2C总线、电平转换</td></tr><tr><td align="left"><strong>模拟模式</strong></td><td align="left">输入&#x2F;输出</td><td align="left">直通</td><td align="left">断开数字电路</td><td align="left">ADC采样、DAC输出</td></tr><tr><td align="left"><strong>复用推挽</strong></td><td align="left">输出</td><td align="left">强高低电平</td><td align="left">信号由片上外设控制</td><td align="left">SPI_SCK, USART_TX</td></tr><tr><td align="left"><strong>复用开漏</strong></td><td align="left">输出</td><td align="left">低&#x2F;高阻态</td><td align="left">信号由片上外设控制，开漏特性</td><td align="left">I2C_SDA&#x2F;SCL</td></tr></tbody></table><p><strong>如何选择模式？</strong></p><ol><li><strong>读取开关&#x2F;按键状态</strong> -&gt; <strong>上拉输入</strong> 或 <strong>下拉输入</strong>。</li><li><strong>驱动LED</strong> -&gt; <strong>推挽输出</strong>。</li><li><strong>I2C通信</strong> -&gt; <strong>复用开漏输出</strong>（并使能内部或使用外部上拉电阻）。</li><li><strong>ADC读取电压</strong> -&gt; <strong>模拟模式</strong>。</li><li><strong>USART串口发送</strong> -&gt; <strong>复用推挽输出</strong>。</li><li><strong>USART串口接收</strong> -&gt; <strong>浮空输入</strong>（或上拉输入，取决于空闲状态）。</li></ol><h2 id="时序"><a href="#时序" class="headerlink" title="时序"></a>时序</h2><h3 id="CPU时序基础知识"><a href="#CPU时序基础知识" class="headerlink" title="CPU时序基础知识"></a>CPU时序基础知识</h3><ul><li><strong>振荡周期</strong>：为单片机提供定时信号的振荡源的周期（晶振周期）。例如，外接12MHz晶振时，振荡周期 &#x3D; ( 1 &#x2F; 12 )µs。</li><li><strong>状态周期</strong>：2个振荡周期为1个状态周期，用S表示。例如，12MHz晶振时，状态周期 &#x3D; ( 1 &#x2F; 6 )µs。</li><li><strong>机器周期</strong>：1个机器周期含6个状态周期（12个振荡周期）。例如，12MHz晶振时，机器周期 &#x3D; 1µs。</li><li><strong>指令周期</strong>：完成1条指令所占用的全部时间，以机器周期为单位。例如，12MHz晶振时，指令周期 &#x3D; 1~4µs（取决于指令的复杂程度）。</li><li><strong>12MHz晶振</strong>：优点在于计算<strong>定时器</strong>的初值非常方便，机器周期是整数的1µs。缺点是产生的<strong>串口通信波特率</strong>存在较大误差，可能导致通信不稳定。</li><li><strong>11.0592MHz晶振</strong>：优点在于可以产生<strong>非常精确的串口波特率</strong>，误差极小，通信可靠。缺点是计算<strong>定时器</strong>初值时会得到小数，不够直观。</li></ul><h3 id="分频"><a href="#分频" class="headerlink" title="分频"></a>分频</h3><p>. 核心概念：什么是“分频”？</p><p>你可以把单片机内核看作一个高速工作的核心引擎。晶振产生的原始时钟频率（比如11.0592MHz）就像是引擎的最高转速，这个速度非常快。如果让定时器直接以这个速度计数，会计数得飞快，很难用于精确控制较长的时间。</p><p>因此，需要一个“减速器”或“变速箱”，让定时器的计数速度慢下来。这个“减速器”就是 <strong>分频器</strong>。</p><ul><li><strong>“12T”模式</strong>：意思就是 <strong>将系统时钟进行12分频后，再提供给定时器作为其时钟源</strong>。<ul><li>也就是说，系统主时钟跳动12次，定时器的计数器才增加1。</li></ul></li></ul><ol start="2"><li>对机器周期的影响</li></ol><p>这是理解51单片机时序的基础。在标准的51架构中：</p><ul><li><strong>机器周期 &#x3D; 12个时钟周期</strong>。</li></ul><p>这正好与“定时器时钟12T”相对应。在标准51模式下，<strong>1个机器周期</strong> 的定义就是CPU完成一个基本操作（如取指令、译码）所需要的时间，它由 <strong>12个时钟振荡周期</strong> 组成。</p><p>所以，<strong>“定时器时钟12T” 也常被称为 “12时钟模式” 或 “标准51模式”</strong>。在这种模式下，定时器的计数频率是晶振频率的 1&#x2F;12。</p><ol start="3"><li>具体计算示例</li></ol><p>让我们用具体的数字来看，这样更清晰。</p><ul><li><strong>假设外接晶振频率 (Fosc) &#x3D; 12MHz</strong></li><li><strong>系统时钟周期 (振荡周期)</strong> &#x3D; 1 &#x2F; 12MHz &#x3D; 1&#x2F;12 µs</li><li><strong>在12T模式下，定时器的时钟频率</strong> &#x3D; Fosc &#x2F; 12 &#x3D; 12MHz &#x2F; 12 &#x3D; 1MHz</li><li><strong>定时器的计数周期 (即机器周期)</strong> &#x3D; 1 &#x2F; 1MHz &#x3D; <strong>1µs</strong></li></ul><p><strong>这意味着什么？</strong><br>这意味着在12T模式下，定时器每过 <strong>1微秒</strong>，其计数值才会加1。这为我们提供了非常方便的时间基准。比如要定时1ms，只需要计数1000次即可。</p><ol start="4"><li>对比：12T模式 vs 1T模式（高速模式）</li></ol><p>很多现代的增强型51单片机（如STC的很多型号）为了提升性能，引入了 <strong>“1T”模式</strong>。</p><ul><li><strong>“1T”模式</strong>：意思是 <strong>不分频，定时器直接使用系统时钟作为其时钟源</strong>。<ul><li>也就是说，系统主时钟跳动1次，定时器的计数器就增加1。</li></ul></li></ul><p>同样以12MHz晶振为例：</p><ul><li><strong>在1T模式下，定时器的时钟频率</strong> &#x3D; Fosc &#x3D; 12MHz</li><li><strong>定时器的计数周期</strong> &#x3D; 1 &#x2F; 12MHz ≈ 0.083µs</li></ul><p><strong>对比结论：</strong><br>在相同的晶振频率下，1T模式的定时器计数速度是12T模式的 <strong>12倍</strong>。</p><ul><li><strong>优点</strong>：速度极快，精度更高，可以实现更短的定时和更高速的波特率。</li><li><strong>缺点</strong>：对于需要长时间定时的场景，定时器溢出会非常频繁。</li></ul><p>总结</p><ul><li><strong>定时器时钟12T</strong>：指的是<strong>12分频模式</strong>，是<strong>传统51单片机的标准模式</strong>。</li><li><strong>工作原理</strong>：定时器每接收12个系统时钟脉冲，才计数1次。</li><li><strong>直接影响</strong>：它决定了<strong>机器周期</strong>，并使得定时器的计数速度变慢，更容易用于控制我们日常感知的“秒”、“毫秒”级别的时间。</li><li><strong>公式</strong>：在12T模式下，<code>机器周期 = 12 / Fosc</code>，<code>定时器计数频率 = Fosc / 12</code>。</li></ul><p>简单来说，<strong>12T就是一个为了适应人类时间感知和早期CPU性能而设置的“减速档”，而1T则是为了追求高性能的“高速档”</strong>。在编程时，你需要根据自己单片机的数据手册，确认定时器工作在哪种模式，才能正确计算初值。</p><h3 id="机器周期与时钟频率的关系"><a href="#机器周期与时钟频率的关系" class="headerlink" title="机器周期与时钟频率的关系"></a>机器周期与时钟频率的关系</h3><ul><li><strong>机器周期</strong>是单片机执行操作的基本时间单位，计算公式为：  <strong>机器周期 &#x3D; 1 &#x2F; 单片机的时钟频率</strong>。</li><li>51单片机内部时钟频率是外部晶振频率的12分频。也就是说，如果外部晶振频率为<br>$$<br>f_{\text{osc}}，则内部时钟频率为  f_{\text{osc}} &#x2F; 12 。<br>$$</li><li>例如，当使用12MHz外部晶振时：<ul><li>内部时钟频率 &#x3D; 12MHz &#x2F; 12 &#x3D; 1MHz。</li><li>机器周期 &#x3D; 1 &#x2F; 1MHz &#x3D; 1µs。</li></ul></li></ul><h3 id="定时器初值的计算"><a href="#定时器初值的计算" class="headerlink" title="定时器初值的计算"></a>定时器初值的计算</h3><p>定时器工作时，从初值开始向上计数，当计数到65536（16位定时器的最大值，即 ( 2^{16} )）时溢出，产生中断。要定时一定时间，需要计算所需的计数值 ( N )：</p><ul><li>$$<br>N &#x3D; \frac{\text{定时时间}}{\text{机器周期}}<br>$$</li><li>初值 ( X ) 的计算公式为：  ( X &#x3D; 65536 - N )<br>（因为计数器从初值开始计数到65536溢出，所以需要减去 ( N )）。</li></ul><p><strong>示例：定时1ms</strong></p><ul><li>使用12MHz晶振，机器周期 &#x3D; 1µs。</li><li>需要定时1ms，所以 ( N &#x3D; 1ms &#x2F; 1µs &#x3D; 1000 )。</li><li>初值 ( X &#x3D; 65536 - 1000 &#x3D; 64536 )。</li><li>将64536转换为十六进制：64536 &#x3D; 0xFC18。</li><li>因此，定时器初值设置为：<br>( THx &#x3D; 0xFC )（高字节），<br>( TLx &#x3D; 0x18 )（低字节）。</li></ul><h3 id="定时器波特率初值的计算"><a href="#定时器波特率初值的计算" class="headerlink" title="定时器波特率初值的计算"></a><strong>定时器波特率初值的计算</strong></h3><p>在51单片机中，串口通信的波特率通常由<strong>定时器1（T1）</strong> 在<strong>工作模式2（8位自动重装模式）</strong> 下产生。这是最常用且最精确的方式。</p><p>其波特率计算公式为：<strong>波特率 &#x3D; (2^SMOD &#x2F; 32) × (定时器1的溢出率)</strong></p><ul><li><strong>SMOD</strong>：是<code>PCON</code>寄存器（电源控制寄存器）的最高位。<code>SMOD=1</code>时，波特率加倍；<code>SMOD=0</code>时，波特率不加倍。通常为了稳定性，我们取 <code>SMOD = 0</code>。</li><li><strong>定时器1的溢出率</strong>：即定时器1每秒溢出的次数。</li></ul><p>由于我们使用<strong>模式2（自动重装模式）</strong>，定时器1的溢出率计算公式为：<strong>定时器1的溢出率 &#x3D; Fosc &#x2F; (12 × [256 - TH1])</strong></p><ul><li><strong>Fosc</strong>：系统晶振频率。</li><li><strong>TH1</strong>：定时器1的高8位寄存器，也是我们要求解的<strong>波特率初值</strong>。</li></ul><p>将两个公式合并，得到：<strong>波特率 &#x3D; (2^SMOD × Fosc) &#x2F; (384 × [256 - TH1])</strong></p><p>现在我们从这个公式中解出 <strong>TH1</strong>（即波特率初值）：</p><ol><li><code>波特率 × 384 × (256 - TH1) = 2^SMOD × Fosc</code></li><li><code>256 - TH1 = (2^SMOD × Fosc) / (384 × 波特率)</code></li><li><strong>TH1 &#x3D; 256 - (2^SMOD × Fosc) &#x2F; (384 × 波特率)</strong></li></ol><p><strong>示例1：使用11.0592MHz晶振，目标波特率9600bps，SMOD&#x3D;0</strong></p><ol><li><strong>列出已知条件</strong>：<ul><li>Fosc &#x3D; 11,059,200 Hz</li><li>波特率 &#x3D; 9600</li><li>SMOD &#x3D; 0 → 2^SMOD &#x3D; 1</li></ul></li><li><strong>代入公式</strong>：<br><code>TH1 = 256 - (1 × 11059200) / (384 × 9600)</code></li><li><strong>计算</strong>：<ul><li>先计算分母：<code>384 × 9600 = 3,686,400</code></li><li>计算除法：<code>11,059,200 / 3,686,400 = 3</code></li><li>最终结果：<code>TH1 = 256 - 3 = 253</code></li></ul></li><li><strong>得到初值</strong>：<br><strong>TH1 &#x3D; 253 (0xFD)</strong></li></ol><p><strong>结论</strong>：这就是为什么11.0592MHz被称为”串口通信的魔法晶振”，因为它计算常用波特率时，TH1总是整数，没有误差！</p><p><strong>示例2：使用12.000MHz晶振，目标波特率9600bps，SMOD&#x3D;0</strong></p><ol><li><strong>列出已知条件</strong>：<ul><li>Fosc &#x3D; 12,000,000 Hz</li><li>波特率 &#x3D; 9600</li><li>SMOD &#x3D; 0 → 2^SMOD &#x3D; 1</li></ul></li><li><strong>代入公式</strong>：<br><code>TH1 = 256 - (1 × 12000000) / (384 × 9600)</code></li><li><strong>计算</strong>：<ul><li>分母：<code>384 × 9600 = 3,686,400</code></li><li>计算除法：<code>12,000,000 / 3,686,400 ≈ 3.2552</code></li><li>最终结果：<code>TH1 = 256 - 3.2552 ≈ 252.7448</code></li></ul></li><li><strong>取整处理</strong>：<br>我们只能给TH1赋予整数值，所以通常取 <strong>TH1 &#x3D; 253 (0xFD)</strong>。</li><li><strong>计算误差</strong>（非常重要！）：<br>现在我们用实际值反算一下波特率，看看误差有多大。<br><code>实际波特率 = (1 × 12000000) / (384 × [256 - 253]) = 12,000,000 / (384 × 3) = 12,000,000 / 1152 ≈ 10416.7 bps</code><br><strong>误差率 &#x3D; (10416.7 - 9600) &#x2F; 9600 × 100% ≈ 8.5%</strong></li></ol><p><strong>结论</strong>：使用12MHz晶振时，波特率存在约8.5%的误差，这已经远超串口通信允许的误差范围（通常要求&lt;3%），<strong>极易导致通信失败</strong>。</p><h2 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h2><p>ULN2003 是一款常用的<strong>达林顿晶体管阵列芯片</strong>，常用于<strong>51单片机</strong>或其他微控制器的<strong>输出驱动扩展</strong>，主要用于驱动较大电流或较高电压的负载，如继电器、步进电机、LED显示、小型直流电机等。</p><hr><h3 id="ULN2003-的基本结构"><a href="#ULN2003-的基本结构" class="headerlink" title="ULN2003 的基本结构"></a>ULN2003 的基本结构</h3><ul><li><p><strong>7路达林顿管阵列</strong>：每路可独立控制。</p></li><li><p><strong>每路结构</strong>：</p><p><img src="https://live2d-api-jet.vercel.app/model/image/51/ULN2003.png"></p><ul><li>输入引脚（B1~B7）</li><li>输出引脚（C1~C7）</li><li>内置<strong>2.7kΩ 基极电阻</strong>，可直接与5V TTL&#x2F;CMOS电平（如51单片机I&#x2F;O口）连接。</li><li>内置<strong>续流二极管（COM端）</strong>，用于感性负载（如继电器、电机）的反向电动势保护。</li></ul></li></ul><hr><h3 id="在51单片机中的典型用法"><a href="#在51单片机中的典型用法" class="headerlink" title="在51单片机中的典型用法"></a>在51单片机中的典型用法</h3><p>连接方式：</p><ul><li><strong>输入（B1~B7）</strong> → 连接51单片机的I&#x2F;O口（如P1口）</li><li><strong>输出（C1~C7）</strong> → 连接负载（如继电器线圈、LED灯组、步进电机绕组）</li><li><strong>COM端</strong> → 接负载电源正极（如+12V、+24V），用于续流保护。</li></ul><p>示例：驱动继电器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 51单片机代码示例：控制ULN2003驱动继电器</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;reg51.h&gt;</span></span><br><br>sbit RELAY = P1^<span class="hljs-number">0</span>;  <span class="hljs-comment">// 假设P1.0接ULN2003的B1</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        RELAY = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 输出高电平，ULN2003导通，继电器吸合</span><br>        Delay_ms(<span class="hljs-number">1000</span>);<br>        RELAY = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 输出低电平，ULN2003截止，继电器释放</span><br>        Delay_ms(<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="模拟钢琴"><a href="#模拟钢琴" class="headerlink" title="模拟钢琴"></a>模拟钢琴</h3><ul><li><p><strong>键盘与音符</strong></p><p><img src="https://live2d-api-jet.vercel.app/model/image/51/SheetMusic.png"></p><ul><li><p><strong>音高</strong>：上面图中每个<strong>字组</strong>中相同的音之间相差<strong>八度</strong>的关系，每个字组从<strong>上面</strong>看相邻的两个音之间是半音的关系，而从<strong>下面</strong>看相邻的两个音之间是全音的关系。</p></li><li><p><strong>简谱</strong>：想要表示全部<strong>白键</strong>的音，可以由<strong>小字1组</strong>中的音加八度或减八度具体表现为是数字的上方是加点还是在数字的下方加点；想要表示<strong>黑键</strong>的音，可以使用升音符号：<strong>#<strong>和降音符号：<strong>b</strong>,两个符号要不</strong>升高半音</strong>要不<strong>减少半音</strong>。</p></li><li><p><strong>音符</strong>：音符的时长，分为全音符、二分音符、四分音符、八分音符、十六分音符、三十二分音符，一般以四分音符为基准，假设四分音符是500ms，那么二分音符就是1s、八分音符就是250ms以此类推。</p><p><img src="https://live2d-api-jet.vercel.app/model/image/51/Notation.png"></p></li><li><p><strong>时长</strong>：如上面图中<strong>黄色</strong>圈中音符后面的黑色短横线代表的是延长一个四分音符的时长，简谱上的一个音符（数字）表示的是四分音符，二这种后面加了横线的表示的是二分音符；<strong>红色</strong>圈中的音符下面的黑色短横线代表的是延长时长的二分之一倍，如果音符的右下角有一个小点（<strong>附点</strong>）表示在原来音符的基础上加上半个音符，例如原本是四分音符有<strong>附点</strong>后加八分音符，表示时间变为原理的1.5倍。</p></li><li><p><strong>拍</strong>：如上图左上角的四分之一表示的是以四分音符为一拍每小节有四拍。</p></li><li><p><strong>延音线</strong>：将两个相同的音合并为一个音。</p></li></ul></li><li><p><strong>音符与频率对照</strong></p><img src="https://live2d-api-jet.vercel.app/model/image/51/NotesAndFrequencies.png" style="zoom:67%;" /><p>以小字组中的a为基准频率，它的频率为440，那么A的频率为220，a1的频率为880；在A和a中(有12个音)的频率是以等比数列进行平分的，那么B的频率就可以表示为A<em>2^(1&#x2F;12);有了*<em>频率</em></em>(Hz)，我们就可以计算它的<strong>振荡周期</strong>(1&#x2F;频率)(s)，这里我们要将它转换成为<strong>微秒</strong>，所以要×10^6,在这里如果我们的</p></li></ul><h2 id="定时器-计数器"><a href="#定时器-计数器" class="headerlink" title="定时器&#x2F;计数器"></a>定时器&#x2F;计数器</h2><h3 id="TMOD-寄存器简介"><a href="#TMOD-寄存器简介" class="headerlink" title="TMOD 寄存器简介"></a>TMOD 寄存器简介</h3><p>TMOD 是一个8位的特殊功能寄存器，地址为 0x89。它用于控制和设置<strong>定时器&#x2F;计数器0</strong> 和 <strong>定时器&#x2F;计数器1</strong> 的工作模式。</p><p>它的结构如下：</p><table><thead><tr><th align="left">D7</th><th align="left">D6</th><th align="left">D5</th><th align="left">D4</th><th align="left">D3</th><th align="left">D2</th><th align="left">D1</th><th align="left">D0</th></tr></thead><tbody><tr><td align="left"><strong>GATE</strong></td><td align="left"><strong>C&#x2F;T</strong></td><td align="left"><strong>M1</strong></td><td align="left"><strong>M0</strong></td><td align="left"><strong>GATE</strong></td><td align="left"><strong>C&#x2F;T</strong></td><td align="left"><strong>M1</strong></td><td align="left"><strong>M0</strong></td></tr><tr><td align="left">← <strong>定时器1</strong> →</td><td align="left">← <strong>定时器0</strong> →</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><ul><li><strong>高4位 (D7-D4)</strong>：用于控制<strong>定时器1</strong>。</li><li><strong>低4位 (D3-D0)</strong>：用于控制<strong>定时器0</strong>。</li></ul><p>每个定时器的4位含义完全相同：</p><ul><li><strong>GATE</strong>：门控位。<ul><li><code>0</code> - 定时器的启动仅由 <strong>TRx</strong> (TCON寄存器中的位) 控制。</li><li><code>1</code> - 定时器的启动由 <strong>TRx</strong> 和 <strong>外部中断引脚 (INTx)</strong> 共同控制。只有当INTx引脚为高电平<strong>且</strong>TRx&#x3D;1时，定时器才开始计数。常用于测量外部脉冲的宽度。</li></ul></li><li><strong>C&#x2F;T</strong>：定时器或计数器模式选择位。<ul><li><code>0</code> - <strong>定时器模式</strong>。对单片机内部的机器周期进行计数。</li><li><code>1</code> - <strong>计数器模式</strong>。对来自外部引脚 (T0&#x2F;P3.4 或 T1&#x2F;P3.5) 的下降沿脉冲进行计数。</li></ul></li><li><strong>M1</strong> 和 <strong>M0</strong>：工作模式选择位。这两位组合起来定义了四种工作模式。</li></ul><hr><h3 id="四种工作模式详解-M1-M0"><a href="#四种工作模式详解-M1-M0" class="headerlink" title="四种工作模式详解 (M1, M0)"></a>四种工作模式详解 (M1, M0)</h3><p><strong>模式 0 (M1&#x3D;0, M0&#x3D;0)：13位定时器&#x2F;计数器</strong></p><ul><li><strong>工作原理</strong>：<ul><li>使用了 <strong>TLx</strong> 的低5位和 <strong>THx</strong> 的全部8位，共同组成一个13位的计数器（2^13 &#x3D; 8192）。</li><li>TLx的高3位无效。</li></ul></li><li><strong>特点</strong>：<ul><li>这是为了兼容早期的8048单片机而设计的，计数值范围小（0~8191）。</li><li><strong>现在已基本被淘汰</strong>，不建议在新项目中使用。</li></ul></li><li><strong>初值计算</strong>：<code>初值 = 8192 - N</code> (N为需要的计数值)</li></ul><p><strong>模式 1 (M1&#x3D;0, M0&#x3D;1)：16位定时器&#x2F;计数器</strong></p><ul><li><strong>工作原理</strong>：<ul><li><strong>TLx</strong> 和 <strong>THx</strong> 全部使用，组成一个标准的16位计数器（2^16 &#x3D; 65536）。这是<strong>最常用</strong>的模式之一。</li></ul></li><li><strong>特点</strong>：<ul><li>计数值范围大（0~65535）。</li><li>需要<strong>手动重装初值</strong>。当计数器溢出后，TLx和THx会清零，如果需要再次定时，必须在中断服务程序中用代码重新写入初值。</li></ul></li><li><strong>适用场景</strong>：需要较长时间定时的场合，如精确延时1ms、10ms等。</li><li><strong>初值计算</strong>：<code>初值 = 65536 - N</code> (N为需要的计数值)<ul><li>例如，用12MHz晶振，机器周期为1us，定时1ms需要计数1000次。则初值 &#x3D; 65536 - 1000 &#x3D; 64536 &#x3D; 0xFC18。所以 <code>TH = 0xFC</code>, <code>TL = 0x18</code>。</li></ul></li></ul><p><strong>模式 2 (M1&#x3D;1, M0&#x3D;0)：8位自动重装定时器&#x2F;计数器</strong></p><ul><li><strong>工作原理</strong>：<ul><li><strong>TLx</strong> 作为8位计数器（2^8 &#x3D; 256）。</li><li><strong>THx</strong> 作为存放<strong>重装值</strong>的寄存器。</li><li>当TLx计数溢出时，不仅会产生溢出标志位（TFx），<strong>硬件还会自动将THx中的值重新装入TLx</strong>，然后立即开始下一轮的计数。</li></ul></li><li><strong>特点</strong>：<ul><li><strong>自动重装</strong>，无需软件干预，定时非常精确，没有因重装指令带来的时间误差。</li><li>计数值范围小（0~255）。</li></ul></li><li><strong>适用场景</strong>：需要<strong>精确、高频</strong>的定时场合，尤其适合用作<strong>串口通信的波特率发生器</strong>。</li><li><strong>初值计算</strong>：<code>初值 = 256 - N</code> (N为需要的计数值)<ul><li>例如，要定时200个机器周期，初值 &#x3D; 256 - 200 &#x3D; 56。所以 <code>THx = 56</code>, <code>TLx = 56</code>。</li></ul></li></ul><p><strong>模式 3 (M1&#x3D;1, M0&#x3D;1)：两个独立的8位定时器（仅适用于T0）</strong></p><ul><li><strong>工作原理</strong>：<ul><li>当T0设置为模式3时，它会被拆分成<strong>两个独立的8位计数器</strong>。</li><li><strong>TL0</strong>：占用原来T0的全部控制位（GATE, C&#x2F;T, TR0, TF0, INT0），可以工作在定时器或计数器模式。</li><li><strong>TH0</strong>：只能作为<strong>定时器</strong>使用（固定对机器周期计数），它占用了<strong>定时器1</strong>的 <strong>TR1</strong> 和 <strong>TF1</strong> 控制位。</li></ul></li><li><strong>特点</strong>：<ul><li>在这种模式下，<strong>定时器1</strong> 会因为TR1和TF1被占用而无法启动计数，但其<strong>串口波特率发生器功能仍然可以工作</strong>（通常设置T1为模式2，作为波特率发生器）。</li></ul></li><li><strong>适用场景</strong>：当系统需要<strong>三个定时器&#x2F;计数器</strong>时（例如，一个用于串口波特率，另外两个用于其他定时），可以让T0工作于模式3。</li></ul><hr><h3 id="如何使用-TMOD"><a href="#如何使用-TMOD" class="headerlink" title="如何使用 TMOD"></a>如何使用 TMOD</h3><p><strong>步骤一：选择模式并计算TMOD的值</strong></p><p>你需要分别设置定时器1和定时器0。</p><p><strong>示例1</strong>：设置定时器0为 <strong>模式1，定时器模式，不受外部引脚控制</strong>。</p><ul><li>GATE &#x3D; 0</li><li>C&#x2F;T &#x3D; 0 (定时器模式)</li><li>M1 &#x3D; 0, M0 &#x3D; 1 (模式1)</li><li>所以，定时器0的控制位为 <code>0001</code> (二进制)。</li><li>我们不关心定时器1，但为了不影响它，通常将其设为 <code>0000</code> (模式0，定时器模式)。</li><li>因此，整个TMOD寄存器应为 <code>0000 0001</code> (二进制) &#x3D; <code>0x01</code>。</li></ul><p><strong>示例2</strong>：设置定时器1为 <strong>模式2，定时器模式，用作波特率发生器</strong>。</p><ul><li>GATE &#x3D; 0</li><li>C&#x2F;T &#x3D; 0 (定时器模式)</li><li>M1 &#x3D; 1, M0 &#x3D; 0 (模式2)</li><li>所以，定时器1的控制位为 <code>0010</code> (二进制)。</li><li>定时器0设为 <code>0000</code>。</li><li>因此，整个TMOD寄存器应为 <code>0010 0000</code> (二进制) &#x3D; <code>0x20</code>。</li></ul><p><strong>步骤二：编写代码</strong></p><p><strong>直接赋值法（推荐，清晰）</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 设置 T0 为模式1，定时器</span><br>TMOD = <span class="hljs-number">0x01</span>;<br><br><span class="hljs-comment">// 设置 T1 为模式2，定时器（不影响T0的设置）</span><br>TMOD = <span class="hljs-number">0x20</span>;<br></code></pre></td></tr></table></figure><p><strong>位操作法（更安全，避免影响另一个定时器）</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 清除T0相关的位（低4位），然后设置为模式1</span><br>TMOD &amp;= <span class="hljs-number">0xF0</span>; <span class="hljs-comment">// 将低4位清零，高4位保持不变</span><br>TMOD |= <span class="hljs-number">0x01</span>; <span class="hljs-comment">// 设置低4位为0001（模式1）</span><br><br><span class="hljs-comment">// 清除T1相关的位（高4位），然后设置为模式2</span><br>TMOD &amp;= <span class="hljs-number">0x0F</span>; <span class="hljs-comment">// 将高4位清零，低4位保持不变</span><br>TMOD |= <span class="hljs-number">0x20</span>; <span class="hljs-comment">// 设置高4位为0010（模式2）</span><br></code></pre></td></tr></table></figure><p><strong>步骤三：赋予初值并启动定时器</strong></p><p>以定时器0模式1为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 1. 设置模式</span><br>TMOD |= <span class="hljs-number">0x01</span>; <span class="hljs-comment">// 设置T0为模式1</span><br><br><span class="hljs-comment">// 2. 赋予初值（例如定时1ms，晶振12MHz）</span><br>TH0 = <span class="hljs-number">0xFC</span>;<br>TL0 = <span class="hljs-number">0x18</span>;<br><br><span class="hljs-comment">// 3. 开启总中断和定时器0中断</span><br>EA = <span class="hljs-number">1</span>;<br>ET0 = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 4. 启动定时器0</span><br>TR0 = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 5. 等待中断发生...</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 6. 在中断服务函数中重装初值（模式1必须手动重装）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer0_isr</span><span class="hljs-params">()</span> interrupt 1 &#123;<br>    TH0 = <span class="hljs-number">0xFC</span>; <span class="hljs-comment">// 必须手动重装</span><br>    TL0 = <span class="hljs-number">0x18</span>;<br>    <span class="hljs-comment">// ... 执行你的定时任务</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="left">模式</th><th align="left">位数</th><th align="left">特点</th><th align="left">应用场景</th></tr></thead><tbody><tr><td align="left"><strong>模式0</strong></td><td align="left">13位</td><td align="left">兼容旧型号，已淘汰</td><td align="left">不推荐使用</td></tr><tr><td align="left"><strong>模式1</strong></td><td align="left">16位</td><td align="left"><strong>最常用</strong>，范围大，需手动重装</td><td align="left">精确长定时（如1ms）</td></tr><tr><td align="left"><strong>模式2</strong></td><td align="left">8位</td><td align="left"><strong>自动重装</strong>，精度高</td><td align="left">串口波特率发生器，精确短定时</td></tr><tr><td align="left"><strong>模式3</strong></td><td align="left">两个8位</td><td align="left">T0拆分成两个独立定时器</td><td align="left">需要额外定时器时</td></tr></tbody></table><h2 id="AT24C02"><a href="#AT24C02" class="headerlink" title="AT24C02"></a><strong>AT24C02</strong></h2><p><img src="https://live2d-api-jet.vercel.app/model/image/51/EEPROM.png" alt="图示为普中51-实验板上的EEPROM"></p><ul><li>AT24C02是一种可以实现掉电不丢失的存储器，可以用于保存单片机运行时想要永久保存的数据信息</li><li>存储介质：<strong>EEPROM</strong></li><li>通讯接口：IIC总线</li><li>容量：256字节</li><li>引脚：VCC、GND、WE（写使能，上面有一横线表示低电平有效）、SCL和SDA（IIC接口）、（E0、E1、E2）（IIC地址）</li></ul><h3 id="IIC总线"><a href="#IIC总线" class="headerlink" title="IIC总线"></a><strong>IIC总线</strong></h3><ul><li><p><strong>I2C</strong>，全称 <strong>Inter-Integrated Circuit</strong>，中文常译为“集成电路总线”，是由飞利浦公司开发的一种简单、双向、同步、串行的通信总线。</p></li><li><p>两根通信线：<strong>SCL</strong>（Serial Clock）、<strong>SDA</strong>（Serial Data）</p></li><li><p>同步、半双工、带<strong>数据应答</strong></p></li><li><p>通用I2C总线，可以使各种设备的通信标准统一，对于厂家来说，使用成熟的方案可以缩短芯片的设计周期、提高稳定性，对于应用者来说，使用通用的通信协议可以避免学习各种各样的自定义协议，降低学习和应用的难度</p></li><li><p>I2C电路规范：</p><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_CircuitSpecifications.png" style="zoom: 80%;" /><ul><li><p>所有I2C设备的SCL连在一起，SDA连在一起</p></li><li><p>设备的SCL和SDA均要配置成<strong>开漏输出</strong>模式</p></li><li><p>SCL和SDA各添加一个<strong>上拉电阻</strong>，阻值一般为4.7欧左右</p></li><li><p><strong>开漏输出</strong>和<strong>上拉电阻</strong>的共同作用是实现了**“线与”**的功能，此设计主要是为了解决多机通信互相干扰的问题</p></li><li><p><strong>“线与”</strong>：如果CPU想和其中的一个设备进行通信的话，最好的状态就是其它设备<strong>断开</strong>，而<strong>开漏模式</strong>中输出高电平的时候是处于<strong>高阻态</strong>，外面的<strong>上拉电阻</strong>是当所有设备都断开的时候，用来提供<strong>上拉能力</strong>的；由于SDA和SCL都是开漏输出，都需要<strong>上拉电阻</strong>才能产生高电平，所以任何的设备都可以将总线拉低，但<strong>不能主动驱动高电平</strong>，这就是“线与”的逻辑：<u><strong>任何设备都能拉低总线</strong></u></p></li><li><p><strong>释放SDA的本质</strong></p><ul><li>当<strong>所有设备都释放SDA</strong>（高阻态）时：SDA &#x3D; 高电平（由上拉电阻决定）</li><li>当<strong>任一设备拉低SDA</strong>时：SDA &#x3D; 低电平</li></ul><table><thead><tr><th align="left">场景</th><th align="left">释放SDA的目的</th><th align="left">不释放的后果</th></tr></thead><tbody><tr><td align="left"><strong>接收字节前</strong></td><td align="left">交出SDA控制权，让从机发送数据</td><td align="left">数据冲突，通信失败</td></tr><tr><td align="left"><strong>接收应答前</strong></td><td align="left">让从机能够拉低SDA发送ACK</td><td align="left">无法获得从机应答，通信中断</td></tr></tbody></table><p><strong>核心思想：</strong> I2C是<strong>半双工</strong>总线，SDA是<strong>共享资源</strong>。释放SDA就是”轮到你了”的信号，确保任何时候只有一方在驱动总线，避免冲突</p></li></ul></li></ul><h3 id="IIC时序结构"><a href="#IIC时序结构" class="headerlink" title="IIC时序结构"></a><strong>IIC时序结构</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_Condition.png" alt="上位SDA，下位SCL" style="zoom:50%;" /><ul><li><strong>起始条件</strong>：SCL高电平期间，SDA从高电平切换到低电平</li><li><strong>终止条件</strong>：SCL高电平期间，SDA从低电平切换到高电平</li></ul><hr><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_Send.png" style="zoom:50%;" /><ul><li><strong>发送一个字节</strong>：SCL低电平期间，<strong>主机</strong>将数据为依次放到SDA线上（高位在前），然后拉高SCL，<strong>从机</strong>将在SCL高电平期间读取数据未，所以SCL高电平期间SDA不允许有数据变化，依次循环上述过程八次，即可发送一个字节</li></ul><hr><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_Read.png" style="zoom:50%;" /><ul><li><strong>接收一个字节</strong>：SCL低电平期间，从机将数据位依次放到SDA线上（高位在前），然后拉高SCL，主机将在SCL高电平期间读取数据位，所以SCL高电平期间SDA不允许有数据的变化，依次循环上述过程八次，既可以接收一个字节（主机在接收之前，需要释放SDA）</li></ul><hr><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_Answer.png" style="zoom:50%;" /><ul><li><strong>发送应答</strong>：在接收完一个字节之后，主机在下一个时钟发送一位数据，数据0表示应答，数据1表示非应答</li><li><strong>接收应答</strong>：在发送完一个字节之后，主机在下一个时钟接收一位数据，判断从机是否应答，数据0表示应答，数据1表示分应答（主机在接收之前，需要释放SDA）</li></ul><h3 id="IIC数据帧"><a href="#IIC数据帧" class="headerlink" title="IIC数据帧"></a><strong>IIC数据帧</strong></h3><ul><li><p>发送一帧数据 完成任务（向谁发什么）</p><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_SendDataFrame.png" style="zoom:50%;" /><p>前七位是IIC的地址，其中地址的前四位是固定端，后三位是可配置的，最后一位是读写位</p></li></ul><hr><ul><li><p>接收一帧数据 完成任务（向谁收什么）</p><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_ReadDataFrame.png" style="zoom:50%;" /></li></ul><hr><ul><li><p>先发送再接收数据帧（复合格式）完成任务（向谁收指定的什么）</p><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_SendReadDataFrame.png" style="zoom:50%;" /></li></ul><hr><ul><li><p>字节写：在WOED ADDRESS处写入数据DATA</p><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_ByteWrite.png" style="zoom:50%;" /><hr></li><li><p>随机读：读出在WORD ADDRESS处的数据DATA</p><img src="https://live2d-api-jet.vercel.app/model/image/51/IIC_RandRead.png" style="zoom:50%;" /></li><li><p>AT24C02的固定地址位1010，可配置地址本开发板上是000，所以SLAVE ADDRESS+W为0xA0，SLAVE ADDRESS+R为0xA1</p></li></ul><h2 id="DS18B20"><a href="#DS18B20" class="headerlink" title="DS18B20"></a><strong>DS18B20</strong></h2><h3 id="DS18B20简介"><a href="#DS18B20简介" class="headerlink" title="DS18B20简介"></a><strong>DS18B20简介</strong></h3><p><strong><img src="https://live2d-api-jet.vercel.app/model/image/51/DS18B20.png" alt="图示为普中51-实验板上的DS18B20"></strong></p><ul><li>DS18B20是一种常见的<strong>数字温度传感器</strong>，其控制命令和数据都是以<strong>数字信号</strong>的方式输入输出，相比较于<strong>模拟温度传感器</strong>，其具有功能强大、硬件简单、易扩展、抗干扰强等特点</li><li>测温范围：-55°C到+125°C</li><li>通信接口：1-Wire（<strong>单总线</strong>）</li><li>其他特征：可形成总线结构、内置温度报警功能、可<strong>寄生供电</strong>（要提供强上拉）</li><li>引脚：VDD、VCC、（I&#x2F;O）DQ（单总线接口）</li></ul><h3 id="内部结构框图"><a href="#内部结构框图" class="headerlink" title="内部结构框图"></a><strong>内部结构框图</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/DS18B20StructuralDiagram.png" style="zoom:50%;" /><ul><li><p>PARASITE POWER CIRCUIT：寄生功率电路</p></li><li><p>POWER-SUPPLY SENSE：感应外部电源是否存在</p></li><li><p>64-BIT ROM：作为器件地址（<strong>全球唯一</strong>），用于总线通信的寻址</p></li><li><p>EEPROM：用于保存温度触发阈值和配置参数</p></li><li><p>8-BIT CRC CENERATOR：循环冗余校验</p></li><li><p>SCRATCHPAD：</p><img src="https://live2d-api-jet.vercel.app/model/image/51/DS18B20MemoryStructure.png" style="zoom:50%;" /><ul><li>第0位和第1位分别存的是Temperature的最低有效字节和最高有效字节，默认是0x0550（85°C)</li><li>第2、3、4位用于和EEPROM进行交换的</li><li>第5、6、7位作为保留位</li><li>第8位校验位</li></ul></li></ul><h3 id="单总线"><a href="#单总线" class="headerlink" title="单总线"></a><strong>单总线</strong></h3><ul><li><p>单总线（1-Wire BUS）是由Dallas公司开发的一种通用数据总线</p></li><li><p>一根通信线：DQ</p></li><li><p>异步、<strong>半双工</strong></p></li><li><p>单总线只需要一根通信线即可实现数据的双向传输，当采用<strong>寄生供电</strong>时，还可以省去设备的VDD线路，此时，供电加通信只需要DQ和GND两根线</p></li><li><p>单总线需要<strong>最高的优先级</strong>，因为它里面有严格的延迟时间，如果被<strong>中断器中断</strong>的话就会导致数据传输出错</p></li><li><p>单总线电路规范：</p><img src="https://live2d-api-jet.vercel.app/model/image/51/SingleBus_CircuitSpecifications.png" style="zoom:50%;" /><ul><li>设备的DQ均需要配置成<strong>开漏输出模式</strong></li><li>DQ添加一个<strong>上拉电阻</strong>，阻值一般为4.7千欧左右</li><li>若此总线的丛机采用寄生供电，则主机还应配一个<strong>强上拉输出电路</strong></li></ul></li></ul><h3 id="单总线时序结构"><a href="#单总线时序结构" class="headerlink" title="单总线时序结构"></a><strong>单总线时序结构</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/SingleBus_Init.png" style="zoom:50%;" /><ul><li><p><strong>初始化</strong>：主机将总线拉低至少480us，然后释放总线，等待15<del>60us（不好取的时候，使用中间值）后，存在的从机会拉低60</del>240us以响应主机，之后从机释放总线，这里面的时间是绝对是时间，因为只有一根线没法传递时间，所以必须要使用<strong>绝对时间</strong></p><ul><li><p>Bus master pulling low：主机拉低总线</p></li><li><p>DS18B20 pulling low：从机拉低总线</p></li><li><p>Resistor pullup：电阻上拉，由于表示的是<strong>弱上拉</strong>，所以线是弯的</p></li></ul></li></ul><hr><img src="https://live2d-api-jet.vercel.app/model/image/51/SingleBus_SendBit.png" style="zoom:50%;" /><ul><li><p><strong>发送一位</strong>：主机将总线拉低60<del>120us，然后释放总线，表示发送0；主机将总线拉低1</del>15us，然后释放总线，表示发送1。从机将在总线拉低30us后（典型值）读取电平，整个时间应大于60us</p></li><li><p>Trec：发送或接送的时间隔应大于1us</p></li><li><p>图中的阴影部分表示可以释放总线的范围</p></li></ul><hr><img src="https://live2d-api-jet.vercel.app/model/image/51/SingleBus_ReceiveBit.png" style="zoom:50%;" /><ul><li><strong>接送一位</strong>：主机将总线拉低1~15us，然后释放总线，并拉低后15us内读取总线电平（尽量接近15us的末尾），读取为低电平则为接收0，读取为高电平则为接收1，整个时间片应大于60us<ul><li>主机拉低总线释放后，如果从机没有拉低，那么就会弹上去，如果从机拉低了，那么会后弹上去</li></ul></li></ul><hr><ul><li><p><strong>发送一个字节</strong>：连续调用8次发送一位的时序，依次发送一个字节的8位（低位在前）</p></li><li><p><strong>接收一个字节</strong>：连续调用8次接收一位的时序，依次接收一个字节的8位（低位在前）</p></li></ul><h3 id="DS18B20操作流程"><a href="#DS18B20操作流程" class="headerlink" title="DS18B20操作流程"></a><strong>DS18B20操作流程</strong></h3><ul><li><p><strong>初始化</strong>：从机复位，主机判断从机是否响应</p></li><li><p><strong>ROM操作</strong>：ROM指令+本指令需要的读写操作</p></li><li><p><strong>功能操作</strong>：功能指令+本指令需要的读写操作</p></li><li><p><strong>ROM指令</strong>：</p><table><thead><tr><th align="left">指令名称</th><th align="left">指令代码</th><th align="left">适用系统</th><th align="center">主要功能</th></tr></thead><tbody><tr><td align="left"><strong>Search ROM</strong></td><td align="left">F0h</td><td align="left">多点</td><td align="center">发现总线上所有设备的ROM码</td></tr><tr><td align="left"><strong>Read ROM</strong></td><td align="left">33h</td><td align="left"><strong>单点</strong></td><td align="center">读取单一设备的ROM码</td></tr><tr><td align="left"><strong>Match ROM</strong></td><td align="left">55h</td><td align="left">多点</td><td align="center"><strong>精确寻址</strong>一个已知ROM码的设备</td></tr><tr><td align="left"><strong>Skip ROM</strong></td><td align="left">CCh</td><td align="left">单点&#x2F;广播</td><td align="center">跳过寻址，用于<strong>单点操作</strong>或广播命令</td></tr><tr><td align="left"><strong>Alarm Search</strong></td><td align="left">ECh</td><td align="left">多点</td><td align="center">只搜索触发温度报警的设备</td></tr><tr><td align="left"><strong>Overdrive Skip ROM</strong></td><td align="left">3Ch</td><td align="left">单点（超速）</td><td align="center">在超速模式下跳过ROM</td></tr><tr><td align="left"><strong>Overdrive Match ROM</strong></td><td align="left">69h</td><td align="left">多点（超速）</td><td align="center">在超速模式下匹配ROM</td></tr></tbody></table></li><li><p><strong>功能指令</strong>：</p><table><thead><tr><th align="left">指令名称</th><th align="left">指令代码</th><th align="left">功能描述</th></tr></thead><tbody><tr><td align="left">CONVERT T</td><td align="left">44h</td><td align="left"><strong>启动温度转换</strong>。转换完成后，温度值存储在暂存器中。</td></tr><tr><td align="left">WRITE SCRATCHPAD</td><td align="left">4Eh</td><td align="left">向DS18B20的暂存器写入数据，通常用于写入TH和TL报警阈值以及配置寄存器。</td></tr><tr><td align="left">READ SCRATCHPAD</td><td align="left">BEh</td><td align="left"><strong>读取暂存器</strong>的内容，包括温度值、TH、TL和配置寄存器等共9个字节。</td></tr><tr><td align="left">COPY SCRATCHPAD</td><td align="left">48h</td><td align="left">将暂存器中的TH、TL和配置寄存器复制到DS18B20的E2PROM中，用于永久存储。</td></tr><tr><td align="left">RECALL E2</td><td align="left">B8h</td><td align="left">将E2PROM中存储的TH、TL和配置寄存器值召回至暂存器中。</td></tr><tr><td align="left">READ POWER SUPPLY</td><td align="left">B4h</td><td align="left">读取DS18B20的<strong>供电模式</strong>：0为寄生电源，1为外部电源。</td></tr></tbody></table></li></ul><h3 id="DS18B20数据帧"><a href="#DS18B20数据帧" class="headerlink" title="DS18B20数据帧"></a><strong>DS18B20数据帧</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/DS18B20_ConvertTemperture.png" style="zoom:50%;" /><ul><li><strong>温度变换</strong>：初始化-&gt;跳过ROM-&gt;开始温度变换</li></ul><hr><img src="https://live2d-api-jet.vercel.app/model/image/51/DS18B20_ReadTemperature.png" style="zoom:50%;" /><ul><li><strong>温度读取</strong>：初始化-&gt;跳过ROM-&gt;都暂存器-&gt;连续的读操作</li></ul><h3 id="温度存储格式"><a href="#温度存储格式" class="headerlink" title="温度存储格式"></a><strong>温度存储格式</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/Temperature_MemoryStructure.png" style="zoom:50%;" /><ul><li>其中第0位到第3位存储的是小数部分，第11位到第15位存储的是符号位，以<strong>补码</strong>的形式存储</li></ul><img src="https://live2d-api-jet.vercel.app/model/image/51/Temperature_MemoryStructure2.png" style="zoom:50%;" /><h2 id="LCD1602"><a href="#LCD1602" class="headerlink" title="LCD1602"></a><strong>LCD1602</strong></h2><h3 id="LCD1602介绍"><a href="#LCD1602介绍" class="headerlink" title="LCD1602介绍"></a>LCD1602介绍</h3><img src="https://live2d-api-jet.vercel.app/model/image/51/LCD1602.png" style="zoom:50%;" /><ul><li><p>LCD1602（Liquid Crystal Display）液晶显示屏是<strong>字符型液晶显示模块</strong>，可以显示ASCII码的标准字符和其它的一些内置特殊字符，还可以有8个自定义字符</p></li><li><p>显示容量：16×2个字符，每个字符为5×7点阵</p></li><li><p>引脚：VSS（地）、VDD（电源正极4.5<del>5.5V）、VO（对比度调节电压）、<strong>RS</strong>（数据&#x2F;指令选择，1为数据，0为指令）、<strong>RW</strong>（读&#x2F;写选择，1为读，0为写）、<strong>E</strong>（使能，1为数据有效，下降沿执行命令）、D0</del>D7（数据输入&#x2F;输出）、A（背光灯电源正极）、K（背光灯电源负极）</p></li></ul><h3 id="内部结构框图-1"><a href="#内部结构框图-1" class="headerlink" title="内部结构框图"></a><strong>内部结构框图</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/LCD1602_Structure.png" style="zoom:50%;" /><hr><ul><li>DDRAM（数据显示区）</li></ul><img src="https://live2d-api-jet.vercel.app/model/image/51/LCD1602_DDRAM.png" style="zoom:50%;" /><hr><ul><li>CGRAM+CGROM（字模库）</li></ul><img src="https://live2d-api-jet.vercel.app/model/image/51/LCD1602_CGRAM_CGROM.png" style="zoom:50%;" /><ul><li>CDRAM区我们可以自定义字符写在里面</li></ul><h3 id="时序结构"><a href="#时序结构" class="headerlink" title="时序结构"></a>时序结构</h3><ul><li><p>写数据&#x2F;指令</p><img src="https://live2d-api-jet.vercel.app/model/image/51/LCD1602_TemporalStructure.png" style="zoom:50%;" /></li></ul><h3 id="LCD1602指令集"><a href="#LCD1602指令集" class="headerlink" title="LCD1602指令集"></a>LCD1602指令集</h3><img src="https://live2d-api-jet.vercel.app/model/image/51/LCD1602_InstructionSet.png" style="zoom:50%;" /><h3 id="LCD1602操作流程"><a href="#LCD1602操作流程" class="headerlink" title="LCD1602操作流程"></a>LCD1602操作流程</h3><ul><li><p>初始化：</p><p>发送指令0x38    &#x2F;&#x2F;八位数据接口，两行显示，5×7点阵</p><p>发送指令0x0c    &#x2F;&#x2F;显示开，光标关，闪烁光</p><p>发送指令0x06    &#x2F;&#x2F;数据读写操作后，光标自动加一，画面不动</p><p>发送指令0x01    &#x2F;&#x2F;清屏</p></li><li><p>显示字符：</p><p>发送指令0x80|AC  &#x2F;&#x2F;设置光标位置</p><p>发送数据        &#x2F;&#x2F;发送要显示的字符数据</p><p>发送数据        &#x2F;&#x2F;发送要显示的字符数据</p><p>。。。</p></li></ul><h3 id="字符、字符串"><a href="#字符、字符串" class="headerlink" title="字符、字符串"></a>字符、字符串</h3><ul><li><p><strong>字符</strong>：根据一定规则建立的数字到字符的映射（ASCII码表）</p><p>例如：0x21&#x3D;‘!’，0x41&#x3D;‘A’，0x00&#x3D;‘\0’</p><p>定义方法：char x&#x3D;’A’；等效于char x&#x3D;0x41；</p></li><li><p><strong>字符数组</strong>：存储字符变量非一个数组</p><p>定义方法：char y[]&#x3D;{‘A’,’B’,’C’}；等效于char y[]&#x3D;{0x41,0x42,0x43}；</p></li><li><p><strong>字符串</strong>：在字符数组后加一个字符串结束标志，本质上是字符数组</p><p>定义方法：char z[]&#x3D;”ABC”；等效于char z[]&#x3D;{‘A’,’B’,’C’,’\0’}；</p></li></ul><h2 id="DS1302"><a href="#DS1302" class="headerlink" title="DS1302"></a><strong>DS1302</strong></h2><h3 id="DS1302简介"><a href="#DS1302简介" class="headerlink" title="DS1302简介"></a><strong>DS1302简介</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/DS1302_Introduction.png" style="zoom:50%;" /><ul><li>DS1302 涓流充电计时芯片包含一个实时时钟&#x2F;日历和31 字节的静态 RAM.通过简单的串行接口与微处理器通讯.这个实时时钟&#x2F;日历提供年月日,时分秒信息.对于少于31天的月份月末会自动调整,还有闰年校正.由于有一个AM&#x2F;PM指示器，时钟可以工作在12小时制或者24小时制</li><li>同步、半双工</li><li>引脚：CE（读写使能）、I&#x2F;O（数据线）、SCLK（串行时钟）、X1和X2（与标准的32.786kHz石英体连接、VCC1（备用电源）、VCC2（主电源）</li></ul><h3 id="命令字"><a href="#命令字" class="headerlink" title="命令字"></a><strong>命令字</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/DS1302_CommandWord.png" style="zoom:50%;" /><ul><li>命令字启动每一次数据传输，MSB（位7必须是逻辑1，如果是0，则禁止对DS1302写入，位6 在逻辑0时规定为时钟&#x2F;日历数据，逻辑1时为RAM数据；位 1 至 位 5 表示了输入输出的指定寄存器，LSB (位 0) 在逻辑0时为写操作(输出)，逻辑1时为读操作(输入)，命令字以LSB (位 0)开始总是输入.</li></ul><h3 id="寄存器地址定义"><a href="#寄存器地址定义" class="headerlink" title="寄存器地址定义"></a><strong>寄存器地址定义</strong></h3><img src="https://live2d-api-jet.vercel.app/model/image/51/DS1302_RegisterAddress.png" style="zoom:50%;" /><ul><li><strong>秒寄存器的位7 (CH)</strong>：<strong>时钟停止位</strong>。<ul><li><code>1</code>： 时钟振荡器<strong>停止</strong>，DS1302进入低功耗模式，此时可以初始化时间。</li><li><code>0</code>： 时钟<strong>启动</strong>，开始计时。</li><li><strong>重要</strong>：初始化时间时，通常先<code>CH=1</code>停止时钟，写完时间后再<code>CH=0</code>启动时钟。</li></ul></li><li><strong>小时寄存器的位7 (12&#x2F;24)</strong>：<ul><li><code>1</code>： 12小时制。</li><li><code>0</code>： 24小时制。</li></ul></li><li><strong>写保护寄存器的位7 (WP)</strong>：<ul><li><code>0</code>： <strong>允许</strong>写入时钟&#x2F;日历寄存器或RAM。</li><li><code>1</code>： <strong>禁止</strong>写入（写保护）。在初始化时间前，必须先将其清零。</li></ul></li><li><strong>涓流充电寄存器</strong>：用于配置是否对备用电池充电以及充电参数（如串联电阻和二极管数量）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Embedded</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
